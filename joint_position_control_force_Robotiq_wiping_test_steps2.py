import os
import sys
import cv2
import numpy as np
import threading
import time
import pandas as pd
import matplotlib.pyplot as plt
from ForceSensor import ForceSensor
from deoxys import config_root
from deoxys.franka_interface import FrankaInterface
from deoxys.utils.config_utils import YamlConfig, get_default_controller_config
from deoxys.utils.log_utils import get_deoxys_example_logger
import argparse
import pyrealsense2 as rs

logger = get_deoxys_example_logger()

# Global variables
force_data = []
torque_data = []
y_positions = []
eef_positions = []    # <-- New global list to store full (x, y, z) end-effector positions
joint_positions = []
joint_velocities = []
timestamps = []
global_start_time = None
force_sensor = None
initial_z_position = None
initial_eef_position = None
max_samples = 20000
video_duration = 600
pressing_time = 0.05
rs_camera_index = 6
Nexigo_camera_index = 0
force_threshold = 15
torque_threshold = 5
force_max = 20  # Set the force_max threshold here
eef_title = "Offset End-Effector Positions (X, Y, Z) Over Time with 2x Kp"

# Event signals
stop_movement = threading.Event()
stop_monitoring = threading.Event()
movement_done = threading.Event()
recording_done = threading.Event()

# Parse command-line arguments (added options to enable/disable FT sensor and camera)
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--interface-cfg", type=str, default="charmander.yml")
    parser.add_argument("--controller-cfg", type=str, default="joint-position-controller.yml")
    parser.add_argument("--controller-type", type=str, default="OSC_POSE")
    # FT sensor toggle: default is disabled here. Use --enable-ft-sensor to enable.
    parser.add_argument("--enable-ft-sensor", dest="enable_ft_sensor", action="store_true", help="Enable force-torque sensor monitoring")
    parser.add_argument("--disable-ft-sensor", dest="enable_ft_sensor", action="store_false", help="Disable force-torque sensor monitoring")
    parser.set_defaults(enable_ft_sensor=False)
    # Camera toggle: default is disabled here. Use --enable-camera to enable.
    parser.add_argument("--enable-camera", dest="enable_camera", action="store_true", help="Enable camera recording")
    parser.add_argument("--disable-camera", dest="enable_camera", action="store_false", help="Disable camera recording")
    parser.set_defaults(enable_camera=False)
    return parser.parse_args()

# FT Sensor Functions
def calibrate_force_sensor(sensor, num_samples=100, sleep_time=0.01):
    """
    Calibrate the force sensor by calculating force and torque offsets.
    """
    try:
        readings = []
        print("Performing calibration...")
        for _ in range(num_samples):
            force, torque = sensor.get_force_obs()
            readings.append((force, torque))
            # time.sleep(sleep_time)

        # Calculate offsets
        force_offset = np.mean([r[0] for r in readings], axis=0)
        torque_offset = np.mean([r[1] for r in readings], axis=0)
        print(f"Calibration complete. Force offset: {force_offset}, Torque offset: {torque_offset}")
        return force_offset, torque_offset
    except Exception as e:
        print(f"Error during calibration: {e}")
        return None, None

def initialize_force_sensor_for_calibration():
    """
    Initialize the sensor for calibration without applying offsets.
    """
    try:
        sensor = ForceSensor("/dev/ttyUSB0", np.zeros(3), np.zeros(3))
        sensor.force_sensor_setup()
        print("Sensor initialized for calibration.")
        return sensor
    except Exception as e:
        print(f"Error initializing sensor: {e}")
        return None

def monitor_ft_sensor(robot_interface, joint_controller_cfg, osc_controller_type, osc_controller_cfg, sensor, force_offset, torque_offset):
    """
    Monitor the force-torque sensor with calibration offsets, handle thresholds, and perform gravity compensation when needed.
    """
    global force_data, torque_data, global_start_time
    print("Starting monitoring thread.")
    
    handling_threshold = False  # Flag to indicate if threshold handling is in progress

    try:
        while len(force_data) < max_samples and not stop_monitoring.is_set():
            # Read adjusted force-torque data
            raw_force, raw_torque = sensor.get_force_obs()
            adjusted_force = raw_force - force_offset
            adjusted_torque = raw_torque - torque_offset

            elapsed_time = time.time() - global_start_time
            force_magnitude = np.linalg.norm(adjusted_force)
            torque_magnitude = np.linalg.norm(adjusted_torque)

            # Log the data with extra values
            force_data.append((elapsed_time, *adjusted_force, force_magnitude))
            torque_data.append((elapsed_time, *adjusted_torque, torque_magnitude))

            # Handle maximum force threshold
            if force_magnitude > force_max and not handling_threshold:
                print(f"Force exceeds maximum limit ({force_max} N). Returning to initial position.")
                handling_threshold = True  # Set flag to prevent re-triggering
                stop_movement.set()

                # Start a thread to handle returning to the initial position
                threading.Thread(
                    target=return_to_initial_position,
                    args=(robot_interface, joint_controller_cfg),
                    daemon=True
                ).start()
                stop_movement.clear()
                handling_threshold = False  # Reset flag after handling

            # Handle regular force/torque thresholds
            if not handling_threshold and (force_magnitude > force_threshold or torque_magnitude > torque_threshold):
                print("Threshold exceeded. Switching to gravity compensation.")
                stop_movement.set()
                threading.Thread(
                    target=perform_gravity_compensation,
                    args=(robot_interface, osc_controller_type, osc_controller_cfg),
                    daemon=True
                ).start()
                stop_monitoring.set()
                return

            # Short delay for smoother monitoring
            # time.sleep(0.01)

    except Exception as e:
        print(f"Error in monitor_ft_sensor: {e}")

# Video recording function using RealSense camera
def record_video(output_path, duration, fps=30, camera_index=rs_camera_index):
    print(f"Recording video using camera index {camera_index}.")

    # Initialize VideoCapture with the specified camera index
    cap = cv2.VideoCapture(camera_index)
    if not cap.isOpened():
        print(f"Failed to open the camera at index {camera_index}.")
        exit()

    # Get video properties
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # Create a VideoWriter object
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

    start_time = time.time()
    try:
        while time.time() - start_time < duration:
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame. Exiting...")
                break

            # Flip the frame both vertically and horizontally
            flipped_frame = cv2.flip(frame, -1)

            # Write the flipped frame to the video file
            out.write(flipped_frame)

            # Display the flipped frame (optional)
            cv2.imshow('Camera', flipped_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
    finally:
        cap.release()
        out.release()
        cv2.destroyAllWindows()

# Function to return the robot to its initial position
def return_to_initial_position(robot_interface, controller_cfg):
    print("Returning to initial joint positions.")
    reset_joint_positions = [-0.0089260, 0.3819599, -0.0253966, -2.1973930, -0.0307321, 4.1700501, 0.7718912]
    move_to_position(robot_interface, np.array(reset_joint_positions), controller_cfg)
    print("Returning to initial position.")

# Robot Control Functions
def get_end_effector_position(robot_interface):
    ee_pose = robot_interface.last_eef_pose
    position = ee_pose[:3, 3]
    return position

def get_joint_data(robot_interface):
    return robot_interface._state_buffer[-1].q, robot_interface._state_buffer[-1].dq

# Global variable to mark events (used in plotting)
event_markers = []

def move_to_position(robot_interface, target_positions, controller_cfg, event_label=None):
    """
    Moves the robot toward the target joint positions. If the current configuration is far from the target 
    (for example, due to external interference), this function regenerates a smooth trajectory to slow down 
    the motion and avoid a sudden jump.
    """
    global initial_eef_position, eef_positions, event_markers
    action = list(target_positions) + [-1.0]
    start_time = time.time()

    if event_label:
        event_markers.append((time.time() - global_start_time, event_label))

    # Get the current joint position (if available)
    if len(robot_interface._state_buffer) > 0:
        current_joint_pos, _ = get_joint_data(robot_interface)
    else:
        current_joint_pos = target_positions  # fallback if no data is available

    while True:
        if stop_movement.is_set():
            print("Movement stopped due to stop_movement event.")
            break

        if len(robot_interface._state_buffer) > 0:
            current_ee_position = get_end_effector_position(robot_interface)  # shape: (3,)
            joint_pos, joint_vel = get_joint_data(robot_interface)
            joint_positions.append(joint_pos)
            joint_velocities.append(joint_vel)

            # If we haven't stored the initial EEF position yet, store it now
            if initial_eef_position is None:
                initial_eef_position = current_ee_position.copy()

            # Compute the offset relative to the initial position
            offset_x = current_ee_position[0] - initial_eef_position[0]
            offset_y = current_ee_position[1] - initial_eef_position[1]
            offset_z = current_ee_position[2] - initial_eef_position[2]

            current_time = time.time() - global_start_time

            # Store offset (x, y, z) in eef_positions
            eef_positions.append((current_time, offset_x, offset_y, offset_z))

            # Also store the Z offset in y_positions, if desired
            y_positions.append(offset_y)
            timestamps.append(current_time)

            position_error = np.abs(np.array(robot_interface._state_buffer[-1].q) - np.array(target_positions))
            if time.time() - start_time > pressing_time:
                print("Timeout reached. Breaking loop.")
                break
            if np.max(position_error) < 1e-4:
                print("Position error is small. Breaking loop.")
                break

        robot_interface.control(controller_type="JOINT_POSITION", action=action, controller_cfg=controller_cfg)

        if stop_movement.is_set():
            print("Movement interrupted after command.")
            break

        # time.sleep(0.01)

# ---------------------------------------------------------------------------
# Discrete Trajectory: Step-by-Step Joint Position Control
# ---------------------------------------------------------------------------
def joint_position_control(robot_interface, controller_cfg):
    """
    Moves the robot through a discrete sequence of joint positions.
    
    The trajectory is split into a loading phase (step-by-step moves) and an unloading phase
    (which returns through the reverse of the loading positions).
    """
    # Define a series of discrete positions for the loading phase
    loading_positions = [

    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1445, 0.7552, 0.0610, -2.0590, 0.2027, 4.4179, 0.6401],
    # [0.1443, 0.7551, 0.0609, -2.0591, 0.2025, 4.4179, 0.6402],
    # [0.1441, 0.7551, 0.0608, -2.0592, 0.2022, 4.4180, 0.6404],
    # [0.1439, 0.7550, 0.0607, -2.0593, 0.2019, 4.4180, 0.6406],
    # [0.1437, 0.7550, 0.0606, -2.0594, 0.2016, 4.4180, 0.6407],
    # [0.1435, 0.7549, 0.0605, -2.0595, 0.2014, 4.4180, 0.6409],
    # [0.1433, 0.7549, 0.0604, -2.0596, 0.2011, 4.4180, 0.6411],
    # [0.1432, 0.7548, 0.0603, -2.0597, 0.2008, 4.4181, 0.6412],
    # [0.1430, 0.7548, 0.0602, -2.0598, 0.2005, 4.4181, 0.6414],
    # [0.1428, 0.7548, 0.0601, -2.0599, 0.2003, 4.4181, 0.6415],
    # [0.1426, 0.7547, 0.0600, -2.0600, 0.2000, 4.4181, 0.6417],
    # [0.1424, 0.7547, 0.0599, -2.0601, 0.1997, 4.4181, 0.6419],
    # [0.1422, 0.7546, 0.0598, -2.0602, 0.1994, 4.4182, 0.6420],
    # [0.1420, 0.7546, 0.0597, -2.0603, 0.1992, 4.4182, 0.6422],
    # [0.1418, 0.7545, 0.0596, -2.0604, 0.1989, 4.4182, 0.6424],
    # [0.1416, 0.7545, 0.0595, -2.0605, 0.1986, 4.4182, 0.6425],
    # [0.1414, 0.7545, 0.0594, -2.0606, 0.1983, 4.4182, 0.6427],
    # [0.1412, 0.7544, 0.0593, -2.0607, 0.1981, 4.4183, 0.6429],
    # [0.1410, 0.7544, 0.0592, -2.0608, 0.1978, 4.4183, 0.6430],
    # [0.1408, 0.7543, 0.0591, -2.0609, 0.1975, 4.4183, 0.6432],
    # [0.1406, 0.7543, 0.0590, -2.0610, 0.1972, 4.4183, 0.6433],
    # [0.1404, 0.7542, 0.0589, -2.0611, 0.1970, 4.4183, 0.6435],
    # [0.1403, 0.7542, 0.0588, -2.0612, 0.1967, 4.4183, 0.6437],
    # [0.1401, 0.7542, 0.0587, -2.0613, 0.1964, 4.4184, 0.6438],
    # [0.1399, 0.7541, 0.0586, -2.0614, 0.1961, 4.4184, 0.6440],
    # [0.1397, 0.7541, 0.0585, -2.0615, 0.1959, 4.4184, 0.6442],
    # [0.1395, 0.7540, 0.0584, -2.0616, 0.1956, 4.4184, 0.6443],
    # [0.1393, 0.7540, 0.0583, -2.0617, 0.1953, 4.4184, 0.6445],
    # [0.1391, 0.7539, 0.0582, -2.0618, 0.1950, 4.4185, 0.6447],
    # [0.1389, 0.7539, 0.0581, -2.0619, 0.1948, 4.4185, 0.6448],
    # [0.1387, 0.7539, 0.0580, -2.0620, 0.1945, 4.4185, 0.6450],
    # [0.1385, 0.7538, 0.0580, -2.0621, 0.1942, 4.4185, 0.6452],
    # [0.1383, 0.7538, 0.0579, -2.0622, 0.1939, 4.4185, 0.6453],
    # [0.1381, 0.7537, 0.0578, -2.0623, 0.1937, 4.4186, 0.6455],
    # [0.1379, 0.7537, 0.0577, -2.0624, 0.1934, 4.4186, 0.6456],
    # [0.1377, 0.7536, 0.0576, -2.0625, 0.1931, 4.4186, 0.6458],
    # [0.1375, 0.7536, 0.0575, -2.0626, 0.1928, 4.4186, 0.6460],
    # [0.1374, 0.7536, 0.0574, -2.0627, 0.1926, 4.4186, 0.6461],
    # [0.1372, 0.7535, 0.0573, -2.0628, 0.1923, 4.4186, 0.6463],
    # [0.1370, 0.7535, 0.0572, -2.0629, 0.1920, 4.4187, 0.6465],
    # [0.1368, 0.7534, 0.0571, -2.0630, 0.1917, 4.4187, 0.6466],
    # [0.1366, 0.7534, 0.0570, -2.0631, 0.1915, 4.4187, 0.6468],
    # [0.1364, 0.7533, 0.0569, -2.0632, 0.1912, 4.4187, 0.6470],
    # [0.1362, 0.7533, 0.0568, -2.0633, 0.1909, 4.4187, 0.6471],
    # [0.1360, 0.7533, 0.0567, -2.0634, 0.1906, 4.4188, 0.6473],
    # [0.1358, 0.7532, 0.0566, -2.0635, 0.1904, 4.4188, 0.6474],
    # [0.1356, 0.7532, 0.0565, -2.0636, 0.1901, 4.4188, 0.6476],
    # [0.1354, 0.7531, 0.0564, -2.0637, 0.1898, 4.4188, 0.6478],
    # [0.1352, 0.7531, 0.0563, -2.0638, 0.1895, 4.4188, 0.6479],
    # [0.1350, 0.7531, 0.0562, -2.0639, 0.1893, 4.4189, 0.6481],
    # [0.1348, 0.7530, 0.0561, -2.0640, 0.1890, 4.4189, 0.6483],
    # [0.1346, 0.7530, 0.0560, -2.0641, 0.1887, 4.4189, 0.6484],
    # [0.1345, 0.7529, 0.0559, -2.0642, 0.1884, 4.4189, 0.6486],
    # [0.1343, 0.7529, 0.0558, -2.0643, 0.1882, 4.4189, 0.6487],
    # [0.1341, 0.7529, 0.0557, -2.0644, 0.1879, 4.4189, 0.6489],
    # [0.1339, 0.7528, 0.0556, -2.0645, 0.1876, 4.4190, 0.6491],
    # [0.1337, 0.7528, 0.0555, -2.0646, 0.1873, 4.4190, 0.6492],
    # [0.1335, 0.7527, 0.0554, -2.0647, 0.1871, 4.4190, 0.6494],
    # [0.1333, 0.7527, 0.0553, -2.0647, 0.1868, 4.4190, 0.6496],
    # [0.1331, 0.7527, 0.0552, -2.0648, 0.1865, 4.4190, 0.6497],
    # [0.1329, 0.7526, 0.0551, -2.0649, 0.1862, 4.4191, 0.6499],
    # [0.1327, 0.7526, 0.0550, -2.0650, 0.1860, 4.4191, 0.6501],
    # [0.1325, 0.7525, 0.0549, -2.0651, 0.1857, 4.4191, 0.6502],
    # [0.1323, 0.7525, 0.0548, -2.0652, 0.1854, 4.4191, 0.6504],
    # [0.1321, 0.7524, 0.0547, -2.0653, 0.1851, 4.4191, 0.6505],
    # [0.1319, 0.7524, 0.0546, -2.0654, 0.1849, 4.4191, 0.6507],
    # [0.1317, 0.7524, 0.0545, -2.0655, 0.1846, 4.4192, 0.6509],
    # [0.1316, 0.7523, 0.0544, -2.0656, 0.1843, 4.4192, 0.6510],
    # [0.1314, 0.7523, 0.0543, -2.0657, 0.1840, 4.4192, 0.6512],
    # [0.1312, 0.7522, 0.0542, -2.0658, 0.1838, 4.4192, 0.6514],
    # [0.1310, 0.7522, 0.0541, -2.0659, 0.1835, 4.4192, 0.6515],
    # [0.1308, 0.7522, 0.0540, -2.0660, 0.1832, 4.4192, 0.6517],
    # [0.1306, 0.7521, 0.0539, -2.0661, 0.1829, 4.4193, 0.6518],
    # [0.1304, 0.7521, 0.0538, -2.0661, 0.1827, 4.4193, 0.6520],
    # [0.1302, 0.7521, 0.0537, -2.0662, 0.1824, 4.4193, 0.6522],
    # [0.1300, 0.7520, 0.0536, -2.0663, 0.1821, 4.4193, 0.6523],
    # [0.1298, 0.7520, 0.0535, -2.0664, 0.1818, 4.4193, 0.6525],
    # [0.1296, 0.7519, 0.0534, -2.0665, 0.1816, 4.4194, 0.6527],
    # [0.1294, 0.7519, 0.0533, -2.0666, 0.1813, 4.4194, 0.6528],
    # [0.1292, 0.7519, 0.0532, -2.0667, 0.1810, 4.4194, 0.6530],
    # [0.1290, 0.7518, 0.0531, -2.0668, 0.1807, 4.4194, 0.6531],
    # [0.1288, 0.7518, 0.0530, -2.0669, 0.1804, 4.4194, 0.6533],
    # [0.1287, 0.7517, 0.0529, -2.0670, 0.1802, 4.4194, 0.6535],
    # [0.1285, 0.7517, 0.0528, -2.0671, 0.1799, 4.4195, 0.6536],
    # [0.1283, 0.7517, 0.0527, -2.0672, 0.1796, 4.4195, 0.6538],
    # [0.1281, 0.7516, 0.0526, -2.0672, 0.1793, 4.4195, 0.6540],
    # [0.1279, 0.7516, 0.0525, -2.0673, 0.1791, 4.4195, 0.6541],
    # [0.1277, 0.7515, 0.0524, -2.0674, 0.1788, 4.4195, 0.6543],
    # [0.1275, 0.7515, 0.0523, -2.0675, 0.1785, 4.4195, 0.6545],
    # [0.1273, 0.7515, 0.0522, -2.0676, 0.1782, 4.4196, 0.6546],
    # [0.1271, 0.7514, 0.0521, -2.0677, 0.1780, 4.4196, 0.6548],
    # [0.1269, 0.7514, 0.0520, -2.0678, 0.1777, 4.4196, 0.6549],
    # [0.1267, 0.7513, 0.0519, -2.0679, 0.1774, 4.4196, 0.6551],
    # [0.1265, 0.7513, 0.0518, -2.0680, 0.1771, 4.4196, 0.6553],
    # [0.1263, 0.7513, 0.0517, -2.0681, 0.1769, 4.4197, 0.6554],
    # [0.1261, 0.7512, 0.0516, -2.0681, 0.1766, 4.4197, 0.6556],
    # [0.1259, 0.7512, 0.0515, -2.0682, 0.1763, 4.4197, 0.6558],
    # [0.1258, 0.7512, 0.0514, -2.0683, 0.1760, 4.4197, 0.6559],
    # [0.1256, 0.7511, 0.0513, -2.0684, 0.1758, 4.4197, 0.6561],
    # [0.1254, 0.7511, 0.0512, -2.0685, 0.1755, 4.4197, 0.6562],
    # [0.1252, 0.7510, 0.0511, -2.0686, 0.1752, 4.4198, 0.6564],
    # [0.1250, 0.7510, 0.0510, -2.0687, 0.1749, 4.4198, 0.6566],
    # [0.1248, 0.7510, 0.0509, -2.0688, 0.1747, 4.4198, 0.6567],
    # [0.1246, 0.7509, 0.0508, -2.0689, 0.1744, 4.4198, 0.6569],
    # [0.1244, 0.7509, 0.0507, -2.0689, 0.1741, 4.4198, 0.6570],
    # [0.1242, 0.7509, 0.0506, -2.0690, 0.1738, 4.4198, 0.6572],
    # [0.1240, 0.7508, 0.0505, -2.0691, 0.1735, 4.4199, 0.6574],
    # [0.1238, 0.7508, 0.0504, -2.0692, 0.1733, 4.4199, 0.6575],
    # [0.1236, 0.7507, 0.0503, -2.0693, 0.1730, 4.4199, 0.6577],
    # [0.1234, 0.7507, 0.0502, -2.0694, 0.1727, 4.4199, 0.6579],
    # [0.1232, 0.7507, 0.0501, -2.0695, 0.1724, 4.4199, 0.6580],
    # [0.1230, 0.7506, 0.0500, -2.0696, 0.1722, 4.4199, 0.6582],
    # [0.1228, 0.7506, 0.0499, -2.0696, 0.1719, 4.4200, 0.6583],
    # [0.1227, 0.7506, 0.0498, -2.0697, 0.1716, 4.4200, 0.6585],
    # [0.1225, 0.7505, 0.0497, -2.0698, 0.1713, 4.4200, 0.6587],
    # [0.1223, 0.7505, 0.0496, -2.0699, 0.1711, 4.4200, 0.6588],
    # [0.1221, 0.7504, 0.0495, -2.0700, 0.1708, 4.4200, 0.6590],
    # [0.1219, 0.7504, 0.0494, -2.0701, 0.1705, 4.4200, 0.6592],
    # [0.1217, 0.7504, 0.0493, -2.0702, 0.1702, 4.4201, 0.6593],
    # [0.1215, 0.7503, 0.0492, -2.0702, 0.1700, 4.4201, 0.6595],
    # [0.1213, 0.7503, 0.0491, -2.0703, 0.1697, 4.4201, 0.6596],
    # [0.1211, 0.7503, 0.0490, -2.0704, 0.1694, 4.4201, 0.6598],
    # [0.1209, 0.7502, 0.0489, -2.0705, 0.1691, 4.4201, 0.6600],
    # [0.1207, 0.7502, 0.0488, -2.0706, 0.1688, 4.4201, 0.6601],
    # [0.1205, 0.7502, 0.0487, -2.0707, 0.1686, 4.4202, 0.6603],
    # [0.1203, 0.7501, 0.0486, -2.0708, 0.1683, 4.4202, 0.6605],
    # [0.1201, 0.7501, 0.0485, -2.0708, 0.1680, 4.4202, 0.6606],
    # [0.1199, 0.7500, 0.0484, -2.0709, 0.1677, 4.4202, 0.6608],
    # [0.1198, 0.7500, 0.0483, -2.0710, 0.1675, 4.4202, 0.6609],
    # [0.1196, 0.7500, 0.0482, -2.0711, 0.1672, 4.4202, 0.6611],
    # [0.1194, 0.7499, 0.0481, -2.0712, 0.1669, 4.4203, 0.6613],
    # [0.1192, 0.7499, 0.0480, -2.0713, 0.1666, 4.4203, 0.6614],
    # [0.1190, 0.7499, 0.0479, -2.0713, 0.1664, 4.4203, 0.6616],
    # [0.1188, 0.7498, 0.0478, -2.0714, 0.1661, 4.4203, 0.6617],
    # [0.1186, 0.7498, 0.0477, -2.0715, 0.1658, 4.4203, 0.6619],
    # [0.1184, 0.7498, 0.0476, -2.0716, 0.1655, 4.4203, 0.6621],
    # [0.1182, 0.7497, 0.0475, -2.0717, 0.1653, 4.4204, 0.6622],
    # [0.1180, 0.7497, 0.0474, -2.0718, 0.1650, 4.4204, 0.6624],
    # [0.1178, 0.7497, 0.0473, -2.0718, 0.1647, 4.4204, 0.6626],
    # [0.1176, 0.7496, 0.0472, -2.0719, 0.1644, 4.4204, 0.6627],
    # [0.1174, 0.7496, 0.0471, -2.0720, 0.1641, 4.4204, 0.6629],
    # [0.1172, 0.7495, 0.0470, -2.0721, 0.1639, 4.4204, 0.6630],
    # [0.1170, 0.7495, 0.0469, -2.0722, 0.1636, 4.4204, 0.6632],
    # [0.1169, 0.7495, 0.0468, -2.0723, 0.1633, 4.4205, 0.6634],
    # [0.1167, 0.7494, 0.0467, -2.0723, 0.1630, 4.4205, 0.6635],
    # [0.1165, 0.7494, 0.0466, -2.0724, 0.1628, 4.4205, 0.6637],
    # [0.1163, 0.7494, 0.0465, -2.0725, 0.1625, 4.4205, 0.6638],
    # [0.1161, 0.7493, 0.0464, -2.0726, 0.1622, 4.4205, 0.6640],
    # [0.1159, 0.7493, 0.0463, -2.0727, 0.1619, 4.4205, 0.6642],
    # [0.1157, 0.7493, 0.0462, -2.0727, 0.1617, 4.4206, 0.6643],
    # [0.1155, 0.7492, 0.0461, -2.0728, 0.1614, 4.4206, 0.6645],
    # [0.1153, 0.7492, 0.0460, -2.0729, 0.1611, 4.4206, 0.6646],
    # [0.1151, 0.7492, 0.0459, -2.0730, 0.1608, 4.4206, 0.6648],
    # [0.1149, 0.7491, 0.0458, -2.0731, 0.1605, 4.4206, 0.6650],
    # [0.1147, 0.7491, 0.0457, -2.0731, 0.1603, 4.4206, 0.6651],
    # [0.1145, 0.7491, 0.0456, -2.0732, 0.1600, 4.4207, 0.6653],
    # [0.1143, 0.7490, 0.0455, -2.0733, 0.1597, 4.4207, 0.6655],
    # [0.1141, 0.7490, 0.0454, -2.0734, 0.1594, 4.4207, 0.6656],
    # [0.1139, 0.7490, 0.0453, -2.0735, 0.1592, 4.4207, 0.6658],
    # [0.1138, 0.7489, 0.0452, -2.0735, 0.1589, 4.4207, 0.6659],
    # [0.1136, 0.7489, 0.0451, -2.0736, 0.1586, 4.4207, 0.6661],
    # [0.1134, 0.7489, 0.0450, -2.0737, 0.1583, 4.4207, 0.6663],
    # [0.1132, 0.7488, 0.0449, -2.0738, 0.1580, 4.4208, 0.6664],
    # [0.1130, 0.7488, 0.0448, -2.0739, 0.1578, 4.4208, 0.6666],
    # [0.1128, 0.7488, 0.0447, -2.0739, 0.1575, 4.4208, 0.6667],
    # [0.1126, 0.7487, 0.0446, -2.0740, 0.1572, 4.4208, 0.6669],
    # [0.1124, 0.7487, 0.0445, -2.0741, 0.1569, 4.4208, 0.6671],
    # [0.1122, 0.7487, 0.0444, -2.0742, 0.1567, 4.4208, 0.6672],
    # [0.1120, 0.7486, 0.0443, -2.0743, 0.1564, 4.4209, 0.6674],
    # [0.1118, 0.7486, 0.0442, -2.0743, 0.1561, 4.4209, 0.6675],
    # [0.1116, 0.7486, 0.0441, -2.0744, 0.1558, 4.4209, 0.6677],
    # [0.1114, 0.7485, 0.0440, -2.0745, 0.1556, 4.4209, 0.6679],
    # [0.1112, 0.7485, 0.0439, -2.0746, 0.1553, 4.4209, 0.6680],
    # [0.1110, 0.7485, 0.0438, -2.0746, 0.1550, 4.4209, 0.6682],
    # [0.1109, 0.7484, 0.0437, -2.0747, 0.1547, 4.4209, 0.6684],
    # [0.1107, 0.7484, 0.0436, -2.0748, 0.1544, 4.4210, 0.6685],
    # [0.1105, 0.7484, 0.0435, -2.0749, 0.1542, 4.4210, 0.6687],
    # [0.1103, 0.7483, 0.0434, -2.0750, 0.1539, 4.4210, 0.6688],
    # [0.1101, 0.7483, 0.0433, -2.0750, 0.1536, 4.4210, 0.6690],
    # [0.1099, 0.7483, 0.0431, -2.0751, 0.1533, 4.4210, 0.6692],
    # [0.1097, 0.7482, 0.0430, -2.0752, 0.1531, 4.4210, 0.6693],
    # [0.1095, 0.7482, 0.0429, -2.0753, 0.1528, 4.4210, 0.6695],
    # [0.1093, 0.7482, 0.0428, -2.0753, 0.1525, 4.4211, 0.6696],
    # [0.1091, 0.7481, 0.0427, -2.0754, 0.1522, 4.4211, 0.6698],
    # [0.1089, 0.7481, 0.0426, -2.0755, 0.1519, 4.4211, 0.6700],
    # [0.1087, 0.7481, 0.0425, -2.0756, 0.1517, 4.4211, 0.6701],
    # [0.1085, 0.7480, 0.0424, -2.0756, 0.1514, 4.4211, 0.6703],
    # [0.1083, 0.7480, 0.0423, -2.0757, 0.1511, 4.4211, 0.6704],
    # [0.1081, 0.7480, 0.0422, -2.0758, 0.1508, 4.4212, 0.6706],
    # [0.1079, 0.7479, 0.0421, -2.0759, 0.1506, 4.4212, 0.6708],
    # [0.1078, 0.7479, 0.0420, -2.0759, 0.1503, 4.4212, 0.6709],
    # [0.1076, 0.7479, 0.0419, -2.0760, 0.1500, 4.4212, 0.6711],
    # [0.1074, 0.7478, 0.0418, -2.0761, 0.1497, 4.4212, 0.6712],
    # [0.1072, 0.7478, 0.0417, -2.0762, 0.1494, 4.4212, 0.6714],
    # [0.1070, 0.7478, 0.0416, -2.0762, 0.1492, 4.4212, 0.6716],
    # [0.1068, 0.7477, 0.0415, -2.0763, 0.1489, 4.4213, 0.6717],
    # [0.1066, 0.7477, 0.0414, -2.0764, 0.1486, 4.4213, 0.6719],
    # [0.1064, 0.7477, 0.0413, -2.0765, 0.1483, 4.4213, 0.6720],
    # [0.1062, 0.7476, 0.0412, -2.0765, 0.1481, 4.4213, 0.6722],
    # [0.1060, 0.7476, 0.0411, -2.0766, 0.1478, 4.4213, 0.6724],
    # [0.1058, 0.7476, 0.0410, -2.0767, 0.1475, 4.4213, 0.6725],
    # [0.1056, 0.7476, 0.0409, -2.0768, 0.1472, 4.4213, 0.6727],
    # [0.1054, 0.7475, 0.0408, -2.0768, 0.1469, 4.4214, 0.6729],
    # [0.1052, 0.7475, 0.0407, -2.0769, 0.1467, 4.4214, 0.6730],
    # [0.1050, 0.7475, 0.0406, -2.0770, 0.1464, 4.4214, 0.6732],
    # [0.1049, 0.7474, 0.0405, -2.0771, 0.1461, 4.4214, 0.6733],
    # [0.1047, 0.7474, 0.0404, -2.0771, 0.1458, 4.4214, 0.6735],
    # [0.1045, 0.7474, 0.0403, -2.0772, 0.1456, 4.4214, 0.6737],
    # [0.1043, 0.7473, 0.0402, -2.0773, 0.1453, 4.4214, 0.6738],
    # [0.1041, 0.7473, 0.0401, -2.0773, 0.1450, 4.4215, 0.6740],
    # [0.1039, 0.7473, 0.0400, -2.0774, 0.1447, 4.4215, 0.6741],
    # [0.1037, 0.7472, 0.0399, -2.0775, 0.1444, 4.4215, 0.6743],
    # [0.1035, 0.7472, 0.0398, -2.0776, 0.1442, 4.4215, 0.6745],
    # [0.1033, 0.7472, 0.0397, -2.0776, 0.1439, 4.4215, 0.6746],
    # [0.1031, 0.7472, 0.0396, -2.0777, 0.1436, 4.4215, 0.6748],
    # [0.1029, 0.7471, 0.0395, -2.0778, 0.1433, 4.4215, 0.6749],
    # [0.1027, 0.7471, 0.0394, -2.0778, 0.1430, 4.4216, 0.6751],
    # [0.1025, 0.7471, 0.0393, -2.0779, 0.1428, 4.4216, 0.6753],
    # [0.1023, 0.7470, 0.0392, -2.0780, 0.1425, 4.4216, 0.6754],
    # [0.1021, 0.7470, 0.0391, -2.0781, 0.1422, 4.4216, 0.6756],
    # [0.1019, 0.7470, 0.0390, -2.0781, 0.1419, 4.4216, 0.6757],
    # [0.1018, 0.7469, 0.0389, -2.0782, 0.1417, 4.4216, 0.6759],
    # [0.1016, 0.7469, 0.0388, -2.0783, 0.1414, 4.4216, 0.6761],
    # [0.1014, 0.7469, 0.0387, -2.0783, 0.1411, 4.4216, 0.6762],
    # [0.1012, 0.7469, 0.0386, -2.0784, 0.1408, 4.4217, 0.6764],
    # [0.1010, 0.7468, 0.0385, -2.0785, 0.1405, 4.4217, 0.6765],
    # [0.1008, 0.7468, 0.0384, -2.0785, 0.1403, 4.4217, 0.6767],
    # [0.1006, 0.7468, 0.0383, -2.0786, 0.1400, 4.4217, 0.6769],
    # [0.1004, 0.7467, 0.0382, -2.0787, 0.1397, 4.4217, 0.6770],
    # [0.1002, 0.7467, 0.0381, -2.0788, 0.1394, 4.4217, 0.6772],
    # [0.1000, 0.7467, 0.0380, -2.0788, 0.1392, 4.4217, 0.6773],
    # [0.0998, 0.7466, 0.0379, -2.0789, 0.1389, 4.4218, 0.6775],
    # [0.0996, 0.7466, 0.0378, -2.0790, 0.1386, 4.4218, 0.6777],
    # [0.0994, 0.7466, 0.0377, -2.0790, 0.1383, 4.4218, 0.6778],
    # [0.0992, 0.7466, 0.0376, -2.0791, 0.1380, 4.4218, 0.6780],
    # [0.0990, 0.7465, 0.0375, -2.0792, 0.1378, 4.4218, 0.6781],
    # [0.0988, 0.7465, 0.0374, -2.0792, 0.1375, 4.4218, 0.6783],
    # [0.0987, 0.7465, 0.0373, -2.0793, 0.1372, 4.4218, 0.6785],
    # [0.0985, 0.7464, 0.0372, -2.0794, 0.1369, 4.4219, 0.6786],
    # [0.0983, 0.7464, 0.0371, -2.0794, 0.1366, 4.4219, 0.6788],
    # [0.0981, 0.7464, 0.0369, -2.0795, 0.1364, 4.4219, 0.6789],
    # [0.0979, 0.7464, 0.0368, -2.0796, 0.1361, 4.4219, 0.6791],
    # [0.0977, 0.7463, 0.0367, -2.0796, 0.1358, 4.4219, 0.6793],
    # [0.0975, 0.7463, 0.0366, -2.0797, 0.1355, 4.4219, 0.6794],
    # [0.0973, 0.7463, 0.0365, -2.0798, 0.1353, 4.4219, 0.6796],
    # [0.0971, 0.7462, 0.0364, -2.0798, 0.1350, 4.4219, 0.6797],
    # [0.0969, 0.7462, 0.0363, -2.0799, 0.1347, 4.4220, 0.6799],
    # [0.0967, 0.7462, 0.0362, -2.0800, 0.1344, 4.4220, 0.6801],
    # [0.0965, 0.7462, 0.0361, -2.0800, 0.1341, 4.4220, 0.6802],
    # [0.0963, 0.7461, 0.0360, -2.0801, 0.1339, 4.4220, 0.6804],
    # [0.0961, 0.7461, 0.0359, -2.0802, 0.1336, 4.4220, 0.6805],
    # [0.0959, 0.7461, 0.0358, -2.0802, 0.1333, 4.4220, 0.6807],
    # [0.0958, 0.7460, 0.0357, -2.0803, 0.1330, 4.4220, 0.6808],
    # [0.0956, 0.7460, 0.0356, -2.0804, 0.1327, 4.4220, 0.6810],
    # [0.0954, 0.7460, 0.0355, -2.0804, 0.1325, 4.4221, 0.6812],
    # [0.0952, 0.7460, 0.0354, -2.0805, 0.1322, 4.4221, 0.6813],
    # [0.0950, 0.7459, 0.0353, -2.0806, 0.1319, 4.4221, 0.6815],
    # [0.0948, 0.7459, 0.0352, -2.0806, 0.1316, 4.4221, 0.6816],
    # [0.0946, 0.7459, 0.0351, -2.0807, 0.1314, 4.4221, 0.6818],
    # [0.0944, 0.7458, 0.0350, -2.0808, 0.1311, 4.4221, 0.6820],
    # [0.0942, 0.7458, 0.0349, -2.0808, 0.1308, 4.4221, 0.6821],
    # [0.0940, 0.7458, 0.0348, -2.0809, 0.1305, 4.4222, 0.6823],
    # [0.0938, 0.7458, 0.0347, -2.0810, 0.1302, 4.4222, 0.6824],
    # [0.0936, 0.7457, 0.0346, -2.0810, 0.1300, 4.4222, 0.6826],
    # [0.0934, 0.7457, 0.0345, -2.0811, 0.1297, 4.4222, 0.6828],
    # [0.0932, 0.7457, 0.0344, -2.0811, 0.1294, 4.4222, 0.6829],
    # [0.0930, 0.7457, 0.0343, -2.0812, 0.1291, 4.4222, 0.6831],
    # [0.0928, 0.7456, 0.0342, -2.0813, 0.1288, 4.4222, 0.6832],
    # [0.0927, 0.7456, 0.0341, -2.0813, 0.1286, 4.4222, 0.6834],
    # [0.0925, 0.7456, 0.0340, -2.0814, 0.1283, 4.4223, 0.6836],
    # [0.0923, 0.7455, 0.0339, -2.0815, 0.1280, 4.4223, 0.6837],
    # [0.0921, 0.7455, 0.0338, -2.0815, 0.1277, 4.4223, 0.6839],
    # [0.0919, 0.7455, 0.0337, -2.0816, 0.1274, 4.4223, 0.6840],
    # [0.0917, 0.7455, 0.0336, -2.0817, 0.1272, 4.4223, 0.6842],
    # [0.0915, 0.7454, 0.0335, -2.0817, 0.1269, 4.4223, 0.6844],
    # [0.0913, 0.7454, 0.0334, -2.0818, 0.1266, 4.4223, 0.6845],
    # [0.0911, 0.7454, 0.0333, -2.0818, 0.1263, 4.4223, 0.6847],
    # [0.0909, 0.7454, 0.0332, -2.0819, 0.1261, 4.4224, 0.6848],
    # [0.0907, 0.7453, 0.0331, -2.0820, 0.1258, 4.4224, 0.6850],
    # [0.0905, 0.7453, 0.0330, -2.0820, 0.1255, 4.4224, 0.6852],
    # [0.0903, 0.7453, 0.0329, -2.0821, 0.1252, 4.4224, 0.6853],
    # [0.0901, 0.7453, 0.0328, -2.0822, 0.1249, 4.4224, 0.6855],
    # [0.0899, 0.7452, 0.0327, -2.0822, 0.1247, 4.4224, 0.6856],
    # [0.0897, 0.7452, 0.0325, -2.0823, 0.1244, 4.4224, 0.6858],
    # [0.0896, 0.7452, 0.0324, -2.0823, 0.1241, 4.4224, 0.6859],
    # [0.0894, 0.7452, 0.0323, -2.0824, 0.1238, 4.4224, 0.6861],
    # [0.0892, 0.7451, 0.0322, -2.0825, 0.1235, 4.4225, 0.6863],
    # [0.0890, 0.7451, 0.0321, -2.0825, 0.1233, 4.4225, 0.6864],
    # [0.0888, 0.7451, 0.0320, -2.0826, 0.1230, 4.4225, 0.6866],
    # [0.0886, 0.7451, 0.0319, -2.0826, 0.1227, 4.4225, 0.6867],
    # [0.0884, 0.7450, 0.0318, -2.0827, 0.1224, 4.4225, 0.6869],
    # [0.0882, 0.7450, 0.0317, -2.0828, 0.1221, 4.4225, 0.6871],
    # [0.0880, 0.7450, 0.0316, -2.0828, 0.1219, 4.4225, 0.6872],
    # [0.0878, 0.7449, 0.0315, -2.0829, 0.1216, 4.4225, 0.6874],
    # [0.0876, 0.7449, 0.0314, -2.0829, 0.1213, 4.4226, 0.6875],
    # [0.0874, 0.7449, 0.0313, -2.0830, 0.1210, 4.4226, 0.6877],
    # [0.0872, 0.7449, 0.0312, -2.0831, 0.1207, 4.4226, 0.6879],
    # [0.0870, 0.7448, 0.0311, -2.0831, 0.1205, 4.4226, 0.6880],
    # [0.0868, 0.7448, 0.0310, -2.0832, 0.1202, 4.4226, 0.6882],
    # [0.0866, 0.7448, 0.0309, -2.0832, 0.1199, 4.4226, 0.6883],
    # [0.0865, 0.7448, 0.0308, -2.0833, 0.1196, 4.4226, 0.6885],
    # [0.0863, 0.7447, 0.0307, -2.0834, 0.1194, 4.4226, 0.6886],
    # [0.0861, 0.7447, 0.0306, -2.0834, 0.1191, 4.4227, 0.6888],
    # [0.0859, 0.7447, 0.0305, -2.0835, 0.1188, 4.4227, 0.6890],
    # [0.0857, 0.7447, 0.0304, -2.0835, 0.1185, 4.4227, 0.6891],
    # [0.0855, 0.7446, 0.0303, -2.0836, 0.1182, 4.4227, 0.6893],
    # [0.0853, 0.7446, 0.0302, -2.0836, 0.1180, 4.4227, 0.6894],
    # [0.0851, 0.7446, 0.0301, -2.0837, 0.1177, 4.4227, 0.6896],
    # [0.0849, 0.7446, 0.0300, -2.0838, 0.1174, 4.4227, 0.6898],
    # [0.0847, 0.7446, 0.0299, -2.0838, 0.1171, 4.4227, 0.6899],
    # [0.0845, 0.7445, 0.0298, -2.0839, 0.1168, 4.4227, 0.6901],
    # [0.0843, 0.7445, 0.0297, -2.0839, 0.1166, 4.4228, 0.6902],
    # [0.0841, 0.7445, 0.0296, -2.0840, 0.1163, 4.4228, 0.6904],
    # [0.0839, 0.7445, 0.0295, -2.0840, 0.1160, 4.4228, 0.6906],
    # [0.0837, 0.7444, 0.0294, -2.0841, 0.1157, 4.4228, 0.6907],
    # [0.0835, 0.7444, 0.0293, -2.0842, 0.1154, 4.4228, 0.6909],
    # [0.0834, 0.7444, 0.0292, -2.0842, 0.1152, 4.4228, 0.6910],
    # [0.0832, 0.7444, 0.0291, -2.0843, 0.1149, 4.4228, 0.6912],
    # [0.0830, 0.7443, 0.0290, -2.0843, 0.1146, 4.4228, 0.6913],
    # [0.0828, 0.7443, 0.0288, -2.0844, 0.1143, 4.4228, 0.6915],
    # [0.0826, 0.7443, 0.0287, -2.0844, 0.1140, 4.4229, 0.6917],
    # [0.0824, 0.7443, 0.0286, -2.0845, 0.1138, 4.4229, 0.6918],
    # [0.0822, 0.7442, 0.0285, -2.0845, 0.1135, 4.4229, 0.6920],
    # [0.0820, 0.7442, 0.0284, -2.0846, 0.1132, 4.4229, 0.6921],
    # [0.0818, 0.7442, 0.0283, -2.0847, 0.1129, 4.4229, 0.6923],
    # [0.0816, 0.7442, 0.0282, -2.0847, 0.1126, 4.4229, 0.6925],
    # [0.0814, 0.7441, 0.0281, -2.0848, 0.1124, 4.4229, 0.6926],
    # [0.0812, 0.7441, 0.0280, -2.0848, 0.1121, 4.4229, 0.6928],
    # [0.0810, 0.7441, 0.0279, -2.0849, 0.1118, 4.4229, 0.6929],
    # [0.0808, 0.7441, 0.0278, -2.0849, 0.1115, 4.4230, 0.6931],
    # [0.0806, 0.7441, 0.0277, -2.0850, 0.1112, 4.4230, 0.6932],
    # [0.0804, 0.7440, 0.0276, -2.0850, 0.1110, 4.4230, 0.6934],
    # [0.0803, 0.7440, 0.0275, -2.0851, 0.1107, 4.4230, 0.6936],
    # [0.0801, 0.7440, 0.0274, -2.0851, 0.1104, 4.4230, 0.6937],
    # [0.0799, 0.7440, 0.0273, -2.0852, 0.1101, 4.4230, 0.6939],
    # [0.0797, 0.7439, 0.0272, -2.0853, 0.1098, 4.4230, 0.6940],
    # [0.0795, 0.7439, 0.0271, -2.0853, 0.1096, 4.4230, 0.6942],
    # [0.0793, 0.7439, 0.0270, -2.0854, 0.1093, 4.4230, 0.6944],
    # [0.0791, 0.7439, 0.0269, -2.0854, 0.1090, 4.4231, 0.6945],
    # [0.0789, 0.7439, 0.0268, -2.0855, 0.1087, 4.4231, 0.6947],
    # [0.0787, 0.7438, 0.0267, -2.0855, 0.1084, 4.4231, 0.6948],
    # [0.0785, 0.7438, 0.0266, -2.0856, 0.1082, 4.4231, 0.6950],
    # [0.0783, 0.7438, 0.0265, -2.0856, 0.1079, 4.4231, 0.6951],
    # [0.0781, 0.7438, 0.0264, -2.0857, 0.1076, 4.4231, 0.6953],
    # [0.0779, 0.7437, 0.0263, -2.0857, 0.1073, 4.4231, 0.6955],
    # [0.0777, 0.7437, 0.0262, -2.0858, 0.1070, 4.4231, 0.6956],
    # [0.0775, 0.7437, 0.0261, -2.0858, 0.1068, 4.4231, 0.6958],
    # [0.0773, 0.7437, 0.0260, -2.0859, 0.1065, 4.4231, 0.6959],
    # [0.0772, 0.7437, 0.0259, -2.0859, 0.1062, 4.4232, 0.6961],
    # [0.0770, 0.7436, 0.0258, -2.0860, 0.1059, 4.4232, 0.6963],
    # [0.0768, 0.7436, 0.0257, -2.0860, 0.1056, 4.4232, 0.6964],
    # [0.0766, 0.7436, 0.0255, -2.0861, 0.1054, 4.4232, 0.6966],
    # [0.0764, 0.7436, 0.0254, -2.0861, 0.1051, 4.4232, 0.6967],
    # [0.0762, 0.7435, 0.0253, -2.0862, 0.1048, 4.4232, 0.6969],
    # [0.0760, 0.7435, 0.0252, -2.0862, 0.1045, 4.4232, 0.6970],
    # [0.0758, 0.7435, 0.0251, -2.0863, 0.1043, 4.4232, 0.6972],
    # [0.0756, 0.7435, 0.0250, -2.0863, 0.1040, 4.4232, 0.6974],
    # [0.0754, 0.7435, 0.0249, -2.0864, 0.1037, 4.4232, 0.6975],
    # [0.0752, 0.7434, 0.0248, -2.0864, 0.1034, 4.4233, 0.6977],
    # [0.0750, 0.7434, 0.0247, -2.0865, 0.1031, 4.4233, 0.6978],
    # [0.0748, 0.7434, 0.0246, -2.0865, 0.1028, 4.4233, 0.6980],
    # [0.0746, 0.7434, 0.0245, -2.0866, 0.1026, 4.4233, 0.6982],
    # [0.0744, 0.7434, 0.0244, -2.0866, 0.1023, 4.4233, 0.6983],
    # [0.0742, 0.7433, 0.0243, -2.0867, 0.1020, 4.4233, 0.6985],
    # [0.0741, 0.7433, 0.0242, -2.0867, 0.1017, 4.4233, 0.6986],
    # [0.0739, 0.7433, 0.0241, -2.0868, 0.1014, 4.4233, 0.6988],
    # [0.0737, 0.7433, 0.0240, -2.0868, 0.1012, 4.4233, 0.6989],
    # [0.0735, 0.7433, 0.0239, -2.0869, 0.1009, 4.4233, 0.6991],
    # [0.0733, 0.7432, 0.0238, -2.0869, 0.1006, 4.4234, 0.6993],
    # [0.0731, 0.7432, 0.0237, -2.0870, 0.1003, 4.4234, 0.6994],
    # [0.0729, 0.7432, 0.0236, -2.0870, 0.1000, 4.4234, 0.6996],
    # [0.0727, 0.7432, 0.0235, -2.0871, 0.0998, 4.4234, 0.6997],
    # [0.0725, 0.7431, 0.0234, -2.0871, 0.0995, 4.4234, 0.6999],
    # [0.0723, 0.7431, 0.0233, -2.0872, 0.0992, 4.4234, 0.7000],
    # [0.0721, 0.7431, 0.0232, -2.0872, 0.0989, 4.4234, 0.7002],
    # [0.0719, 0.7431, 0.0231, -2.0873, 0.0986, 4.4234, 0.7004],
    # [0.0717, 0.7431, 0.0230, -2.0873, 0.0984, 4.4234, 0.7005],
    # [0.0715, 0.7430, 0.0229, -2.0874, 0.0981, 4.4234, 0.7007],
    # [0.0713, 0.7430, 0.0228, -2.0874, 0.0978, 4.4235, 0.7008],
    # [0.0711, 0.7430, 0.0227, -2.0875, 0.0975, 4.4235, 0.7010],
    # [0.0710, 0.7430, 0.0225, -2.0875, 0.0972, 4.4235, 0.7012],
    # [0.0708, 0.7430, 0.0224, -2.0876, 0.0970, 4.4235, 0.7013],
    # [0.0706, 0.7429, 0.0223, -2.0876, 0.0967, 4.4235, 0.7015],
    # [0.0704, 0.7429, 0.0222, -2.0877, 0.0964, 4.4235, 0.7016],
    # [0.0702, 0.7429, 0.0221, -2.0877, 0.0961, 4.4235, 0.7018],
    # [0.0700, 0.7429, 0.0220, -2.0877, 0.0958, 4.4235, 0.7019],
    # [0.0698, 0.7429, 0.0219, -2.0878, 0.0956, 4.4235, 0.7021],
    # [0.0696, 0.7429, 0.0218, -2.0878, 0.0953, 4.4235, 0.7023],
    # [0.0694, 0.7428, 0.0217, -2.0879, 0.0950, 4.4236, 0.7024],
    # [0.0692, 0.7428, 0.0216, -2.0879, 0.0947, 4.4236, 0.7026],
    # [0.0690, 0.7428, 0.0215, -2.0880, 0.0944, 4.4236, 0.7027],
    # [0.0688, 0.7428, 0.0214, -2.0880, 0.0942, 4.4236, 0.7029],
    # [0.0686, 0.7428, 0.0213, -2.0881, 0.0939, 4.4236, 0.7030],
    # [0.0684, 0.7427, 0.0212, -2.0881, 0.0936, 4.4236, 0.7032],
    # [0.0682, 0.7427, 0.0211, -2.0882, 0.0933, 4.4236, 0.7034],
    # [0.0680, 0.7427, 0.0210, -2.0882, 0.0930, 4.4236, 0.7035],
    # [0.0678, 0.7427, 0.0209, -2.0882, 0.0928, 4.4236, 0.7037],
    # [0.0677, 0.7427, 0.0208, -2.0883, 0.0925, 4.4236, 0.7038],
    # [0.0675, 0.7426, 0.0207, -2.0883, 0.0922, 4.4236, 0.7040],
    # [0.0673, 0.7426, 0.0206, -2.0884, 0.0919, 4.4237, 0.7042],
    # [0.0671, 0.7426, 0.0205, -2.0884, 0.0916, 4.4237, 0.7043],
    # [0.0669, 0.7426, 0.0204, -2.0885, 0.0914, 4.4237, 0.7045],
    # [0.0667, 0.7426, 0.0203, -2.0885, 0.0911, 4.4237, 0.7046],
    # [0.0665, 0.7426, 0.0202, -2.0886, 0.0908, 4.4237, 0.7048],
    # [0.0663, 0.7425, 0.0201, -2.0886, 0.0905, 4.4237, 0.7049],
    # [0.0661, 0.7425, 0.0200, -2.0886, 0.0902, 4.4237, 0.7051],
    # [0.0659, 0.7425, 0.0199, -2.0887, 0.0900, 4.4237, 0.7053],
    # [0.0657, 0.7425, 0.0197, -2.0887, 0.0897, 4.4237, 0.7054],
    # [0.0655, 0.7425, 0.0196, -2.0888, 0.0894, 4.4237, 0.7056],
    # [0.0653, 0.7424, 0.0195, -2.0888, 0.0891, 4.4237, 0.7057],
    # [0.0651, 0.7424, 0.0194, -2.0889, 0.0888, 4.4237, 0.7059],
    # [0.0649, 0.7424, 0.0193, -2.0889, 0.0886, 4.4238, 0.7060],
    # [0.0647, 0.7424, 0.0192, -2.0889, 0.0883, 4.4238, 0.7062],
    # [0.0646, 0.7424, 0.0191, -2.0890, 0.0880, 4.4238, 0.7064],
    # [0.0644, 0.7424, 0.0190, -2.0890, 0.0877, 4.4238, 0.7065],
    # [0.0642, 0.7423, 0.0189, -2.0891, 0.0874, 4.4238, 0.7067],
    # [0.0640, 0.7423, 0.0188, -2.0891, 0.0872, 4.4238, 0.7068],
    # [0.0638, 0.7423, 0.0187, -2.0891, 0.0869, 4.4238, 0.7070],
    # [0.0636, 0.7423, 0.0186, -2.0892, 0.0866, 4.4238, 0.7071],
    # [0.0634, 0.7423, 0.0185, -2.0892, 0.0863, 4.4238, 0.7073],
    # [0.0632, 0.7423, 0.0184, -2.0893, 0.0860, 4.4238, 0.7075],
    # [0.0630, 0.7422, 0.0183, -2.0893, 0.0857, 4.4238, 0.7076],
    # [0.0628, 0.7422, 0.0182, -2.0893, 0.0855, 4.4238, 0.7078],
    # [0.0626, 0.7422, 0.0181, -2.0894, 0.0852, 4.4239, 0.7079],
    # [0.0624, 0.7422, 0.0180, -2.0894, 0.0849, 4.4239, 0.7081],
    # [0.0622, 0.7422, 0.0179, -2.0895, 0.0846, 4.4239, 0.7082],
    # [0.0620, 0.7422, 0.0178, -2.0895, 0.0843, 4.4239, 0.7084],
    # [0.0618, 0.7421, 0.0177, -2.0896, 0.0841, 4.4239, 0.7086],
    # [0.0616, 0.7421, 0.0176, -2.0896, 0.0838, 4.4239, 0.7087],
    # [0.0615, 0.7421, 0.0175, -2.0896, 0.0835, 4.4239, 0.7089],
    # [0.0613, 0.7421, 0.0174, -2.0897, 0.0832, 4.4239, 0.7090],
    # [0.0611, 0.7421, 0.0173, -2.0897, 0.0829, 4.4239, 0.7092],
    # [0.0609, 0.7421, 0.0171, -2.0897, 0.0827, 4.4239, 0.7093],
    # [0.0607, 0.7420, 0.0170, -2.0898, 0.0824, 4.4239, 0.7095],
    # [0.0605, 0.7420, 0.0169, -2.0898, 0.0821, 4.4239, 0.7097],
    # [0.0603, 0.7420, 0.0168, -2.0899, 0.0818, 4.4240, 0.7098],
    # [0.0601, 0.7420, 0.0167, -2.0899, 0.0815, 4.4240, 0.7100],
    # [0.0599, 0.7420, 0.0166, -2.0899, 0.0813, 4.4240, 0.7101],
    # [0.0597, 0.7420, 0.0165, -2.0900, 0.0810, 4.4240, 0.7103],
    # [0.0595, 0.7419, 0.0164, -2.0900, 0.0807, 4.4240, 0.7104],
    # [0.0593, 0.7419, 0.0163, -2.0901, 0.0804, 4.4240, 0.7106],
    # [0.0591, 0.7419, 0.0162, -2.0901, 0.0801, 4.4240, 0.7108],
    # [0.0589, 0.7419, 0.0161, -2.0901, 0.0799, 4.4240, 0.7109],
    # [0.0587, 0.7419, 0.0160, -2.0902, 0.0796, 4.4240, 0.7111],
    # [0.0585, 0.7419, 0.0159, -2.0902, 0.0793, 4.4240, 0.7112],
    # [0.0584, 0.7418, 0.0158, -2.0902, 0.0790, 4.4240, 0.7114],
    # [0.0582, 0.7418, 0.0157, -2.0903, 0.0787, 4.4240, 0.7115],
    # [0.0580, 0.7418, 0.0156, -2.0903, 0.0784, 4.4241, 0.7117],
    # [0.0578, 0.7418, 0.0155, -2.0904, 0.0782, 4.4241, 0.7119],
    # [0.0576, 0.7418, 0.0154, -2.0904, 0.0779, 4.4241, 0.7120],
    # [0.0574, 0.7418, 0.0153, -2.0904, 0.0776, 4.4241, 0.7122],
    # [0.0572, 0.7418, 0.0152, -2.0905, 0.0773, 4.4241, 0.7123],
    # [0.0570, 0.7417, 0.0151, -2.0905, 0.0770, 4.4241, 0.7125],
    # [0.0568, 0.7417, 0.0150, -2.0905, 0.0768, 4.4241, 0.7126],
    # [0.0566, 0.7417, 0.0149, -2.0906, 0.0765, 4.4241, 0.7128],
    # [0.0564, 0.7417, 0.0148, -2.0906, 0.0762, 4.4241, 0.7130],
    # [0.0562, 0.7417, 0.0146, -2.0906, 0.0759, 4.4241, 0.7131],
    # [0.0560, 0.7417, 0.0145, -2.0907, 0.0756, 4.4241, 0.7133],
    # [0.0558, 0.7416, 0.0144, -2.0907, 0.0754, 4.4241, 0.7134],
    # [0.0556, 0.7416, 0.0143, -2.0908, 0.0751, 4.4241, 0.7136],
    # [0.0554, 0.7416, 0.0142, -2.0908, 0.0748, 4.4241, 0.7137],
    # [0.0552, 0.7416, 0.0141, -2.0908, 0.0745, 4.4242, 0.7139],
    # [0.0551, 0.7416, 0.0140, -2.0909, 0.0742, 4.4242, 0.7141],
    # [0.0549, 0.7416, 0.0139, -2.0909, 0.0740, 4.4242, 0.7142],
    # [0.0547, 0.7416, 0.0138, -2.0909, 0.0737, 4.4242, 0.7144],
    # [0.0545, 0.7415, 0.0137, -2.0910, 0.0734, 4.4242, 0.7145],
    # [0.0543, 0.7415, 0.0136, -2.0910, 0.0731, 4.4242, 0.7147],
    # [0.0541, 0.7415, 0.0135, -2.0910, 0.0728, 4.4242, 0.7148],
    # [0.0539, 0.7415, 0.0134, -2.0911, 0.0725, 4.4242, 0.7150],
    # [0.0537, 0.7415, 0.0133, -2.0911, 0.0723, 4.4242, 0.7152],
    # [0.0535, 0.7415, 0.0132, -2.0911, 0.0720, 4.4242, 0.7153],
    # [0.0533, 0.7415, 0.0131, -2.0912, 0.0717, 4.4242, 0.7155],
    # [0.0531, 0.7414, 0.0130, -2.0912, 0.0714, 4.4242, 0.7156],
    # [0.0529, 0.7414, 0.0129, -2.0912, 0.0711, 4.4242, 0.7158],
    # [0.0527, 0.7414, 0.0128, -2.0913, 0.0709, 4.4242, 0.7159],
    # [0.0525, 0.7414, 0.0127, -2.0913, 0.0706, 4.4243, 0.7161],
    # [0.0523, 0.7414, 0.0126, -2.0913, 0.0703, 4.4243, 0.7163],
    # [0.0521, 0.7414, 0.0125, -2.0914, 0.0700, 4.4243, 0.7164],
    # [0.0520, 0.7414, 0.0124, -2.0914, 0.0697, 4.4243, 0.7166],
    # [0.0518, 0.7414, 0.0122, -2.0914, 0.0695, 4.4243, 0.7167],
    # [0.0516, 0.7413, 0.0121, -2.0915, 0.0692, 4.4243, 0.7169],
    # [0.0514, 0.7413, 0.0120, -2.0915, 0.0689, 4.4243, 0.7170],
    # [0.0512, 0.7413, 0.0119, -2.0915, 0.0686, 4.4243, 0.7172],
    # [0.0510, 0.7413, 0.0118, -2.0916, 0.0683, 4.4243, 0.7174],
    # [0.0508, 0.7413, 0.0117, -2.0916, 0.0681, 4.4243, 0.7175],
    # [0.0506, 0.7413, 0.0116, -2.0916, 0.0678, 4.4243, 0.7177],
    # [0.0504, 0.7413, 0.0115, -2.0916, 0.0675, 4.4243, 0.7178],
    # [0.0502, 0.7412, 0.0114, -2.0917, 0.0672, 4.4243, 0.7180],
    # [0.0500, 0.7412, 0.0113, -2.0917, 0.0669, 4.4243, 0.7181],
    # [0.0498, 0.7412, 0.0112, -2.0917, 0.0666, 4.4243, 0.7183],
    # [0.0496, 0.7412, 0.0111, -2.0918, 0.0664, 4.4244, 0.7185],
    # [0.0494, 0.7412, 0.0110, -2.0918, 0.0661, 4.4244, 0.7186],
    # [0.0492, 0.7412, 0.0109, -2.0918, 0.0658, 4.4244, 0.7188],
    # [0.0490, 0.7412, 0.0108, -2.0919, 0.0655, 4.4244, 0.7189],
    # [0.0488, 0.7412, 0.0107, -2.0919, 0.0652, 4.4244, 0.7191],
    # [0.0487, 0.7411, 0.0106, -2.0919, 0.0650, 4.4244, 0.7192],
    # [0.0485, 0.7411, 0.0105, -2.0919, 0.0647, 4.4244, 0.7194],
    # [0.0483, 0.7411, 0.0104, -2.0920, 0.0644, 4.4244, 0.7196],
    # [0.0481, 0.7411, 0.0103, -2.0920, 0.0641, 4.4244, 0.7197],
    # [0.0479, 0.7411, 0.0102, -2.0920, 0.0638, 4.4244, 0.7199],
    # [0.0477, 0.7411, 0.0101, -2.0921, 0.0636, 4.4244, 0.7200],
    # [0.0475, 0.7411, 0.0100, -2.0921, 0.0633, 4.4244, 0.7202],
    # [0.0473, 0.7411, 0.0098, -2.0921, 0.0630, 4.4244, 0.7203],
    # [0.0471, 0.7410, 0.0097, -2.0922, 0.0627, 4.4244, 0.7205],
    # [0.0469, 0.7410, 0.0096, -2.0922, 0.0624, 4.4244, 0.7206],
    # [0.0467, 0.7410, 0.0095, -2.0922, 0.0621, 4.4244, 0.7208],
    # [0.0465, 0.7410, 0.0094, -2.0922, 0.0619, 4.4245, 0.7210],
    # [0.0463, 0.7410, 0.0093, -2.0923, 0.0616, 4.4245, 0.7211],
    # [0.0461, 0.7410, 0.0092, -2.0923, 0.0613, 4.4245, 0.7213],
    # [0.0459, 0.7410, 0.0091, -2.0923, 0.0610, 4.4245, 0.7214],
    # [0.0457, 0.7410, 0.0090, -2.0923, 0.0607, 4.4245, 0.7216],
    # [0.0456, 0.7410, 0.0089, -2.0924, 0.0605, 4.4245, 0.7217],
    # [0.0454, 0.7409, 0.0088, -2.0924, 0.0602, 4.4245, 0.7219],
    # [0.0452, 0.7409, 0.0087, -2.0924, 0.0599, 4.4245, 0.7221],
    # [0.0450, 0.7409, 0.0086, -2.0925, 0.0596, 4.4245, 0.7222],
    # [0.0448, 0.7409, 0.0085, -2.0925, 0.0593, 4.4245, 0.7224],
    # [0.0446, 0.7409, 0.0084, -2.0925, 0.0591, 4.4245, 0.7225],
    # [0.0444, 0.7409, 0.0083, -2.0925, 0.0588, 4.4245, 0.7227],
    # [0.0442, 0.7409, 0.0082, -2.0926, 0.0585, 4.4245, 0.7228],
    # [0.0440, 0.7409, 0.0081, -2.0926, 0.0582, 4.4245, 0.7230],
    # [0.0438, 0.7409, 0.0080, -2.0926, 0.0579, 4.4245, 0.7232],
    # [0.0436, 0.7408, 0.0079, -2.0926, 0.0576, 4.4245, 0.7233],
    # [0.0434, 0.7408, 0.0078, -2.0927, 0.0574, 4.4245, 0.7235],
    # [0.0432, 0.7408, 0.0077, -2.0927, 0.0571, 4.4246, 0.7236],
    # [0.0430, 0.7408, 0.0075, -2.0927, 0.0568, 4.4246, 0.7238],
    # [0.0428, 0.7408, 0.0074, -2.0927, 0.0565, 4.4246, 0.7239],
    # [0.0426, 0.7408, 0.0073, -2.0928, 0.0562, 4.4246, 0.7241],
    # [0.0424, 0.7408, 0.0072, -2.0928, 0.0560, 4.4246, 0.7243],
    # [0.0423, 0.7408, 0.0071, -2.0928, 0.0557, 4.4246, 0.7244],
    # [0.0421, 0.7408, 0.0070, -2.0928, 0.0554, 4.4246, 0.7246],
    # [0.0419, 0.7408, 0.0069, -2.0929, 0.0551, 4.4246, 0.7247],
    # [0.0417, 0.7407, 0.0068, -2.0929, 0.0548, 4.4246, 0.7249],
    # [0.0415, 0.7407, 0.0067, -2.0929, 0.0545, 4.4246, 0.7250],
    # [0.0413, 0.7407, 0.0066, -2.0929, 0.0543, 4.4246, 0.7252],
    # [0.0411, 0.7407, 0.0065, -2.0930, 0.0540, 4.4246, 0.7253],
    # [0.0409, 0.7407, 0.0064, -2.0930, 0.0537, 4.4246, 0.7255],
    # [0.0407, 0.7407, 0.0063, -2.0930, 0.0534, 4.4246, 0.7257],
    # [0.0405, 0.7407, 0.0062, -2.0930, 0.0531, 4.4246, 0.7258],
    # [0.0403, 0.7407, 0.0061, -2.0931, 0.0529, 4.4246, 0.7260],
    # [0.0401, 0.7407, 0.0060, -2.0931, 0.0526, 4.4246, 0.7261],
    # [0.0399, 0.7407, 0.0059, -2.0931, 0.0523, 4.4246, 0.7263],
    # [0.0397, 0.7406, 0.0058, -2.0931, 0.0520, 4.4246, 0.7264],
    # [0.0395, 0.7406, 0.0057, -2.0932, 0.0517, 4.4247, 0.7266],
    # [0.0393, 0.7406, 0.0056, -2.0932, 0.0515, 4.4247, 0.7268],
    # [0.0391, 0.7406, 0.0055, -2.0932, 0.0512, 4.4247, 0.7269],
    # [0.0390, 0.7406, 0.0053, -2.0932, 0.0509, 4.4247, 0.7271],
    # [0.0388, 0.7406, 0.0052, -2.0932, 0.0506, 4.4247, 0.7272],
    # [0.0386, 0.7406, 0.0051, -2.0933, 0.0503, 4.4247, 0.7274],
    # [0.0384, 0.7406, 0.0050, -2.0933, 0.0500, 4.4247, 0.7275],
    # [0.0382, 0.7406, 0.0049, -2.0933, 0.0498, 4.4247, 0.7277],
    # [0.0380, 0.7406, 0.0048, -2.0933, 0.0495, 4.4247, 0.7279],
    # [0.0378, 0.7406, 0.0047, -2.0934, 0.0492, 4.4247, 0.7280],
    # [0.0376, 0.7405, 0.0046, -2.0934, 0.0489, 4.4247, 0.7282],
    # [0.0374, 0.7405, 0.0045, -2.0934, 0.0486, 4.4247, 0.7283],
    # [0.0372, 0.7405, 0.0044, -2.0934, 0.0484, 4.4247, 0.7285],
    # [0.0370, 0.7405, 0.0043, -2.0934, 0.0481, 4.4247, 0.7286],
    # [0.0368, 0.7405, 0.0042, -2.0935, 0.0478, 4.4247, 0.7288],
    # [0.0366, 0.7405, 0.0041, -2.0935, 0.0475, 4.4247, 0.7289],
    # [0.0364, 0.7405, 0.0040, -2.0935, 0.0472, 4.4247, 0.7291],
    # [0.0362, 0.7405, 0.0039, -2.0935, 0.0469, 4.4247, 0.7293],
    # [0.0360, 0.7405, 0.0038, -2.0935, 0.0467, 4.4247, 0.7294],
    # [0.0359, 0.7405, 0.0037, -2.0936, 0.0464, 4.4247, 0.7296],
    # [0.0357, 0.7405, 0.0036, -2.0936, 0.0461, 4.4247, 0.7297],
    # [0.0355, 0.7405, 0.0035, -2.0936, 0.0458, 4.4248, 0.7299],
    # [0.0353, 0.7404, 0.0034, -2.0936, 0.0455, 4.4248, 0.7300],
    # [0.0351, 0.7404, 0.0033, -2.0936, 0.0453, 4.4248, 0.7302],
    # [0.0349, 0.7404, 0.0031, -2.0937, 0.0450, 4.4248, 0.7304],
    # [0.0347, 0.7404, 0.0030, -2.0937, 0.0447, 4.4248, 0.7305],
    # [0.0345, 0.7404, 0.0029, -2.0937, 0.0444, 4.4248, 0.7307],
    # [0.0343, 0.7404, 0.0028, -2.0937, 0.0441, 4.4248, 0.7308],
    # [0.0341, 0.7404, 0.0027, -2.0937, 0.0439, 4.4248, 0.7310],
    # [0.0339, 0.7404, 0.0026, -2.0938, 0.0436, 4.4248, 0.7311],
    # [0.0337, 0.7404, 0.0025, -2.0938, 0.0433, 4.4248, 0.7313],
    # [0.0335, 0.7404, 0.0024, -2.0938, 0.0430, 4.4248, 0.7314],
    # [0.0333, 0.7404, 0.0023, -2.0938, 0.0427, 4.4248, 0.7316],
    # [0.0331, 0.7404, 0.0022, -2.0938, 0.0424, 4.4248, 0.7318],
    # [0.0329, 0.7404, 0.0021, -2.0938, 0.0422, 4.4248, 0.7319],
    # [0.0327, 0.7404, 0.0020, -2.0939, 0.0419, 4.4248, 0.7321],
    # [0.0326, 0.7403, 0.0019, -2.0939, 0.0416, 4.4248, 0.7322],
    # [0.0324, 0.7403, 0.0018, -2.0939, 0.0413, 4.4248, 0.7324],
    # [0.0322, 0.7403, 0.0017, -2.0939, 0.0410, 4.4248, 0.7325],
    # [0.0320, 0.7403, 0.0016, -2.0939, 0.0408, 4.4248, 0.7327],
    # [0.0318, 0.7403, 0.0015, -2.0940, 0.0405, 4.4248, 0.7329],
    # [0.0316, 0.7403, 0.0014, -2.0940, 0.0402, 4.4248, 0.7330],
    # [0.0314, 0.7403, 0.0013, -2.0940, 0.0399, 4.4248, 0.7332],
    # [0.0312, 0.7403, 0.0012, -2.0940, 0.0396, 4.4248, 0.7333],
    # [0.0310, 0.7403, 0.0011, -2.0940, 0.0393, 4.4248, 0.7335],
    # [0.0308, 0.7403, 0.0009, -2.0940, 0.0391, 4.4249, 0.7336],
    # [0.0306, 0.7403, 0.0008, -2.0941, 0.0388, 4.4249, 0.7338],
    # [0.0304, 0.7403, 0.0007, -2.0941, 0.0385, 4.4249, 0.7339],
    # [0.0302, 0.7403, 0.0006, -2.0941, 0.0382, 4.4249, 0.7341],
    # [0.0300, 0.7403, 0.0005, -2.0941, 0.0379, 4.4249, 0.7343],
    # [0.0298, 0.7403, 0.0004, -2.0941, 0.0377, 4.4249, 0.7344],
    # [0.0296, 0.7402, 0.0003, -2.0941, 0.0374, 4.4249, 0.7346],
    # [0.0294, 0.7402, 0.0002, -2.0941, 0.0371, 4.4249, 0.7347],
    # [0.0293, 0.7402, 0.0001, -2.0942, 0.0368, 4.4249, 0.7349],
    # [0.0291, 0.7402, 0.0000, -2.0942, 0.0365, 4.4249, 0.7350],
    # [0.0289, 0.7402, -0.0001, -2.0942, 0.0362, 4.4249, 0.7352],
    # [0.0287, 0.7402, -0.0002, -2.0942, 0.0360, 4.4249, 0.7354],
    # [0.0285, 0.7402, -0.0003, -2.0942, 0.0357, 4.4249, 0.7355],
    # [0.0283, 0.7402, -0.0004, -2.0942, 0.0354, 4.4249, 0.7357],
    # [0.0281, 0.7402, -0.0005, -2.0942, 0.0351, 4.4249, 0.7358],
    # [0.0279, 0.7402, -0.0006, -2.0943, 0.0348, 4.4249, 0.7360],
    # [0.0277, 0.7402, -0.0007, -2.0943, 0.0346, 4.4249, 0.7361],
    # [0.0275, 0.7402, -0.0008, -2.0943, 0.0343, 4.4249, 0.7363],
    # [0.0273, 0.7402, -0.0009, -2.0943, 0.0340, 4.4249, 0.7364],
    # [0.0271, 0.7402, -0.0010, -2.0943, 0.0337, 4.4249, 0.7366],
    # [0.0269, 0.7402, -0.0012, -2.0943, 0.0334, 4.4249, 0.7368],
    # [0.0267, 0.7402, -0.0013, -2.0943, 0.0331, 4.4249, 0.7369],
    # [0.0265, 0.7402, -0.0014, -2.0944, 0.0329, 4.4249, 0.7371],
    # [0.0263, 0.7402, -0.0015, -2.0944, 0.0326, 4.4249, 0.7372],
    # [0.0261, 0.7401, -0.0016, -2.0944, 0.0323, 4.4249, 0.7374],
    # [0.0260, 0.7401, -0.0017, -2.0944, 0.0320, 4.4249, 0.7375],
    # [0.0258, 0.7401, -0.0018, -2.0944, 0.0317, 4.4249, 0.7377],
    # [0.0256, 0.7401, -0.0019, -2.0944, 0.0315, 4.4249, 0.7378],
    # [0.0254, 0.7401, -0.0020, -2.0944, 0.0312, 4.4249, 0.7380],
    # [0.0252, 0.7401, -0.0021, -2.0944, 0.0309, 4.4250, 0.7382],
    # [0.0250, 0.7401, -0.0022, -2.0945, 0.0306, 4.4250, 0.7383],
    # [0.0248, 0.7401, -0.0023, -2.0945, 0.0303, 4.4250, 0.7385],
    # [0.0246, 0.7401, -0.0024, -2.0945, 0.0300, 4.4250, 0.7386],
    # [0.0244, 0.7401, -0.0025, -2.0945, 0.0298, 4.4250, 0.7388],
    # [0.0242, 0.7401, -0.0026, -2.0945, 0.0295, 4.4250, 0.7389],
    # [0.0240, 0.7401, -0.0027, -2.0945, 0.0292, 4.4250, 0.7391],
    # [0.0238, 0.7401, -0.0028, -2.0945, 0.0289, 4.4250, 0.7393],
    # [0.0236, 0.7401, -0.0029, -2.0945, 0.0286, 4.4250, 0.7394],
    # [0.0234, 0.7401, -0.0030, -2.0945, 0.0284, 4.4250, 0.7396],
    # [0.0232, 0.7401, -0.0031, -2.0946, 0.0281, 4.4250, 0.7397],
    # [0.0230, 0.7401, -0.0033, -2.0946, 0.0278, 4.4250, 0.7399],
    # [0.0228, 0.7401, -0.0034, -2.0946, 0.0275, 4.4250, 0.7400],
    # [0.0227, 0.7401, -0.0035, -2.0946, 0.0272, 4.4250, 0.7402],
    # [0.0225, 0.7401, -0.0036, -2.0946, 0.0270, 4.4250, 0.7403],
    # [0.0223, 0.7401, -0.0037, -2.0946, 0.0267, 4.4250, 0.7405],
    # [0.0221, 0.7401, -0.0038, -2.0946, 0.0264, 4.4250, 0.7407],
    # [0.0219, 0.7401, -0.0039, -2.0946, 0.0261, 4.4250, 0.7408],
    # [0.0217, 0.7401, -0.0040, -2.0946, 0.0258, 4.4250, 0.7410],
    # [0.0215, 0.7400, -0.0041, -2.0946, 0.0255, 4.4250, 0.7411],
    # [0.0213, 0.7400, -0.0042, -2.0947, 0.0253, 4.4250, 0.7413],
    # [0.0211, 0.7400, -0.0043, -2.0947, 0.0250, 4.4250, 0.7414],
    # [0.0209, 0.7400, -0.0044, -2.0947, 0.0247, 4.4250, 0.7416],
    # [0.0207, 0.7400, -0.0045, -2.0947, 0.0244, 4.4250, 0.7418],
    # [0.0205, 0.7400, -0.0046, -2.0947, 0.0241, 4.4250, 0.7419],
    # [0.0203, 0.7400, -0.0047, -2.0947, 0.0239, 4.4250, 0.7421],
    # [0.0201, 0.7400, -0.0048, -2.0947, 0.0236, 4.4250, 0.7422],
    # [0.0199, 0.7400, -0.0049, -2.0947, 0.0233, 4.4250, 0.7424],
    # [0.0197, 0.7400, -0.0050, -2.0947, 0.0230, 4.4250, 0.7425],
    # [0.0196, 0.7400, -0.0051, -2.0947, 0.0227, 4.4250, 0.7427],
    # [0.0194, 0.7400, -0.0052, -2.0947, 0.0224, 4.4250, 0.7428],
    # [0.0192, 0.7400, -0.0054, -2.0947, 0.0222, 4.4250, 0.7430],
    # [0.0190, 0.7400, -0.0055, -2.0947, 0.0219, 4.4250, 0.7432],
    # [0.0188, 0.7400, -0.0056, -2.0948, 0.0216, 4.4250, 0.7433],
    # [0.0186, 0.7400, -0.0057, -2.0948, 0.0213, 4.4250, 0.7435],
    # [0.0184, 0.7400, -0.0058, -2.0948, 0.0210, 4.4250, 0.7436],
    # [0.0182, 0.7400, -0.0059, -2.0948, 0.0208, 4.4250, 0.7438],
    # [0.0180, 0.7400, -0.0060, -2.0948, 0.0205, 4.4250, 0.7439],
    # [0.0178, 0.7400, -0.0061, -2.0948, 0.0202, 4.4250, 0.7441],
    # [0.0176, 0.7400, -0.0062, -2.0948, 0.0199, 4.4250, 0.7442],
    # [0.0174, 0.7400, -0.0063, -2.0948, 0.0196, 4.4250, 0.7444],
    # [0.0172, 0.7400, -0.0064, -2.0948, 0.0193, 4.4251, 0.7446],
    # [0.0170, 0.7400, -0.0065, -2.0948, 0.0191, 4.4251, 0.7447],
    # [0.0168, 0.7400, -0.0066, -2.0948, 0.0188, 4.4251, 0.7449],
    # [0.0166, 0.7400, -0.0067, -2.0948, 0.0185, 4.4251, 0.7450],
    # [0.0164, 0.7400, -0.0068, -2.0948, 0.0182, 4.4251, 0.7452],
    # [0.0163, 0.7400, -0.0069, -2.0948, 0.0179, 4.4251, 0.7453],
    # [0.0161, 0.7400, -0.0070, -2.0948, 0.0177, 4.4251, 0.7455],
    # [0.0159, 0.7400, -0.0071, -2.0948, 0.0174, 4.4251, 0.7457],
    # [0.0157, 0.7400, -0.0072, -2.0948, 0.0171, 4.4251, 0.7458],
    # [0.0155, 0.7400, -0.0073, -2.0949, 0.0168, 4.4251, 0.7460],
    # [0.0153, 0.7400, -0.0075, -2.0949, 0.0165, 4.4251, 0.7461],
    # [0.0151, 0.7400, -0.0076, -2.0949, 0.0162, 4.4251, 0.7463],
    # [0.0149, 0.7400, -0.0077, -2.0949, 0.0160, 4.4251, 0.7464],
    # [0.0147, 0.7400, -0.0078, -2.0949, 0.0157, 4.4251, 0.7466],
    # [0.0145, 0.7400, -0.0079, -2.0949, 0.0154, 4.4251, 0.7467],
    # [0.0143, 0.7400, -0.0080, -2.0949, 0.0151, 4.4251, 0.7469],
    # [0.0141, 0.7400, -0.0081, -2.0949, 0.0148, 4.4251, 0.7471],
    # [0.0139, 0.7400, -0.0082, -2.0949, 0.0146, 4.4251, 0.7472],
    # [0.0137, 0.7400, -0.0083, -2.0949, 0.0143, 4.4251, 0.7474],
    # [0.0135, 0.7400, -0.0084, -2.0949, 0.0140, 4.4251, 0.7475],
    # [0.0133, 0.7400, -0.0085, -2.0949, 0.0137, 4.4251, 0.7477],
    # [0.0131, 0.7400, -0.0086, -2.0949, 0.0134, 4.4251, 0.7478],
    # [0.0130, 0.7400, -0.0087, -2.0949, 0.0131, 4.4251, 0.7480],
    # [0.0128, 0.7400, -0.0088, -2.0949, 0.0129, 4.4251, 0.7481],
    # [0.0126, 0.7400, -0.0089, -2.0949, 0.0126, 4.4251, 0.7483],
    # [0.0124, 0.7400, -0.0090, -2.0949, 0.0123, 4.4251, 0.7485],
    # [0.0122, 0.7400, -0.0091, -2.0949, 0.0120, 4.4251, 0.7486],
    # [0.0120, 0.7400, -0.0092, -2.0949, 0.0117, 4.4251, 0.7488],
    # [0.0118, 0.7400, -0.0093, -2.0949, 0.0115, 4.4251, 0.7489],
    # [0.0116, 0.7400, -0.0094, -2.0949, 0.0112, 4.4251, 0.7491],
    # [0.0114, 0.7400, -0.0096, -2.0949, 0.0109, 4.4251, 0.7492],
    # [0.0112, 0.7400, -0.0097, -2.0949, 0.0106, 4.4251, 0.7494],
    # [0.0110, 0.7400, -0.0098, -2.0949, 0.0103, 4.4251, 0.7496],
    # [0.0108, 0.7400, -0.0099, -2.0949, 0.0100, 4.4251, 0.7497],
    # [0.0106, 0.7400, -0.0100, -2.0949, 0.0098, 4.4251, 0.7499],
    # [0.0104, 0.7400, -0.0101, -2.0949, 0.0095, 4.4251, 0.7500],
    # [0.0102, 0.7400, -0.0102, -2.0949, 0.0092, 4.4251, 0.7502],
    # [0.0100, 0.7400, -0.0103, -2.0949, 0.0089, 4.4251, 0.7503],
    # [0.0098, 0.7400, -0.0104, -2.0949, 0.0086, 4.4251, 0.7505],
    # [0.0097, 0.7400, -0.0105, -2.0949, 0.0084, 4.4251, 0.7506],
    # [0.0095, 0.7400, -0.0106, -2.0949, 0.0081, 4.4251, 0.7508],
    # [0.0093, 0.7400, -0.0107, -2.0949, 0.0078, 4.4251, 0.7510],
    # [0.0091, 0.7400, -0.0108, -2.0949, 0.0075, 4.4251, 0.7511],
    # [0.0089, 0.7400, -0.0109, -2.0949, 0.0072, 4.4251, 0.7513],
    # [0.0087, 0.7400, -0.0110, -2.0949, 0.0069, 4.4251, 0.7514],
    # [0.0085, 0.7400, -0.0111, -2.0949, 0.0067, 4.4251, 0.7516],
    # [0.0083, 0.7400, -0.0112, -2.0949, 0.0064, 4.4251, 0.7517],
    # [0.0081, 0.7400, -0.0113, -2.0949, 0.0061, 4.4251, 0.7519],
    # [0.0079, 0.7400, -0.0114, -2.0949, 0.0058, 4.4251, 0.7520],
    # [0.0077, 0.7400, -0.0115, -2.0949, 0.0055, 4.4251, 0.7522],
    # [0.0075, 0.7400, -0.0117, -2.0949, 0.0053, 4.4251, 0.7524],
    # [0.0073, 0.7400, -0.0118, -2.0949, 0.0050, 4.4251, 0.7525],
    # [0.0071, 0.7400, -0.0119, -2.0949, 0.0047, 4.4251, 0.7527],
    # [0.0069, 0.7400, -0.0120, -2.0949, 0.0044, 4.4251, 0.7528],
    # [0.0067, 0.7400, -0.0121, -2.0949, 0.0041, 4.4251, 0.7530],
    # [0.0065, 0.7400, -0.0122, -2.0949, 0.0038, 4.4251, 0.7531],
    # [0.0064, 0.7400, -0.0123, -2.0949, 0.0036, 4.4251, 0.7533],
    # [0.0062, 0.7400, -0.0124, -2.0949, 0.0033, 4.4251, 0.7535],
    # [0.0060, 0.7400, -0.0125, -2.0949, 0.0030, 4.4251, 0.7536],
    # [0.0058, 0.7400, -0.0126, -2.0949, 0.0027, 4.4251, 0.7538],
    # [0.0056, 0.7400, -0.0127, -2.0949, 0.0024, 4.4251, 0.7539],
    # [0.0054, 0.7400, -0.0128, -2.0949, 0.0022, 4.4251, 0.7541],
    # [0.0052, 0.7400, -0.0129, -2.0949, 0.0019, 4.4251, 0.7542],
    # [0.0050, 0.7400, -0.0130, -2.0949, 0.0016, 4.4251, 0.7544],
    # [0.0048, 0.7400, -0.0131, -2.0949, 0.0013, 4.4251, 0.7545],
    # [0.0046, 0.7400, -0.0132, -2.0949, 0.0010, 4.4251, 0.7547],
    # [0.0044, 0.7400, -0.0133, -2.0949, 0.0007, 4.4251, 0.7549],
    # [0.0042, 0.7400, -0.0134, -2.0949, 0.0005, 4.4251, 0.7550],
    # [0.0040, 0.7400, -0.0135, -2.0949, 0.0002, 4.4251, 0.7552],
    # [0.0038, 0.7400, -0.0136, -2.0949, -0.0001, 4.4251, 0.7553],
    # [0.0036, 0.7400, -0.0138, -2.0949, -0.0004, 4.4251, 0.7555],
    # [0.0034, 0.7400, -0.0139, -2.0949, -0.0007, 4.4251, 0.7556],
    # [0.0032, 0.7400, -0.0140, -2.0948, -0.0009, 4.4251, 0.7558],
    # [0.0031, 0.7400, -0.0141, -2.0948, -0.0012, 4.4251, 0.7559],
    # [0.0029, 0.7400, -0.0142, -2.0948, -0.0015, 4.4251, 0.7561],
    # [0.0027, 0.7400, -0.0143, -2.0948, -0.0018, 4.4251, 0.7563],
    # [0.0025, 0.7400, -0.0144, -2.0948, -0.0021, 4.4251, 0.7564],
    # [0.0023, 0.7400, -0.0145, -2.0948, -0.0024, 4.4251, 0.7566],
    # [0.0021, 0.7400, -0.0146, -2.0948, -0.0026, 4.4251, 0.7567],
    # [0.0019, 0.7400, -0.0147, -2.0948, -0.0029, 4.4251, 0.7569],
    # [0.0017, 0.7400, -0.0148, -2.0948, -0.0032, 4.4251, 0.7570],
    # [0.0015, 0.7400, -0.0149, -2.0948, -0.0035, 4.4251, 0.7572],
    # [0.0013, 0.7400, -0.0150, -2.0948, -0.0038, 4.4251, 0.7573],
    # [0.0011, 0.7400, -0.0151, -2.0948, -0.0040, 4.4251, 0.7575],
    # [0.0009, 0.7401, -0.0152, -2.0948, -0.0043, 4.4251, 0.7577],
    # [0.0007, 0.7401, -0.0153, -2.0948, -0.0046, 4.4251, 0.7578],
    # [0.0005, 0.7401, -0.0154, -2.0948, -0.0049, 4.4251, 0.7580],
    # [0.0003, 0.7401, -0.0155, -2.0948, -0.0052, 4.4251, 0.7581],
    # [0.0001, 0.7401, -0.0156, -2.0948, -0.0055, 4.4251, 0.7583],
    # [-0.0001, 0.7401, -0.0157, -2.0947, -0.0057, 4.4251, 0.7584],
    # [-0.0002, 0.7401, -0.0159, -2.0947, -0.0060, 4.4251, 0.7586],
    # [-0.0004, 0.7401, -0.0160, -2.0947, -0.0063, 4.4251, 0.7588],
    # [-0.0006, 0.7401, -0.0161, -2.0947, -0.0066, 4.4251, 0.7589],
    # [-0.0008, 0.7401, -0.0162, -2.0947, -0.0069, 4.4251, 0.7591],
    # [-0.0010, 0.7401, -0.0163, -2.0947, -0.0071, 4.4251, 0.7592],
    # [-0.0012, 0.7401, -0.0164, -2.0947, -0.0074, 4.4251, 0.7594],
    # [-0.0014, 0.7401, -0.0165, -2.0947, -0.0077, 4.4251, 0.7595],
    # [-0.0016, 0.7401, -0.0166, -2.0947, -0.0080, 4.4251, 0.7597],
    # [-0.0018, 0.7401, -0.0167, -2.0947, -0.0083, 4.4251, 0.7598],
    # [-0.0020, 0.7401, -0.0168, -2.0947, -0.0086, 4.4251, 0.7600],
    # [-0.0022, 0.7401, -0.0169, -2.0947, -0.0088, 4.4251, 0.7602],
    # [-0.0024, 0.7401, -0.0170, -2.0946, -0.0091, 4.4251, 0.7603],
    # [-0.0026, 0.7401, -0.0171, -2.0946, -0.0094, 4.4251, 0.7605],
    # [-0.0028, 0.7401, -0.0172, -2.0946, -0.0097, 4.4251, 0.7606],
    # [-0.0030, 0.7401, -0.0173, -2.0946, -0.0100, 4.4251, 0.7608],
    # [-0.0032, 0.7401, -0.0174, -2.0946, -0.0102, 4.4251, 0.7609],
    # [-0.0034, 0.7401, -0.0175, -2.0946, -0.0105, 4.4251, 0.7611],
    # [-0.0035, 0.7401, -0.0176, -2.0946, -0.0108, 4.4251, 0.7612],
    # [-0.0037, 0.7402, -0.0177, -2.0946, -0.0111, 4.4251, 0.7614],
    # [-0.0039, 0.7402, -0.0178, -2.0946, -0.0114, 4.4251, 0.7616],
    # [-0.0041, 0.7402, -0.0180, -2.0946, -0.0117, 4.4251, 0.7617],
    # [-0.0043, 0.7402, -0.0181, -2.0945, -0.0119, 4.4251, 0.7619],
    # [-0.0045, 0.7402, -0.0182, -2.0945, -0.0122, 4.4251, 0.7620],
    # [-0.0047, 0.7402, -0.0183, -2.0945, -0.0125, 4.4251, 0.7622],
    # [-0.0049, 0.7402, -0.0184, -2.0945, -0.0128, 4.4251, 0.7623],
    # [-0.0051, 0.7402, -0.0185, -2.0945, -0.0131, 4.4251, 0.7625],
    # [-0.0053, 0.7402, -0.0186, -2.0945, -0.0133, 4.4251, 0.7627],
    # [-0.0055, 0.7402, -0.0187, -2.0945, -0.0136, 4.4251, 0.7628],
    # [-0.0057, 0.7402, -0.0188, -2.0945, -0.0139, 4.4251, 0.7630],
    # [-0.0059, 0.7402, -0.0189, -2.0945, -0.0142, 4.4251, 0.7631],
    # [-0.0061, 0.7402, -0.0190, -2.0944, -0.0145, 4.4251, 0.7633],
    # [-0.0063, 0.7402, -0.0191, -2.0944, -0.0148, 4.4251, 0.7634],
    # [-0.0065, 0.7402, -0.0192, -2.0944, -0.0150, 4.4251, 0.7636],
    # [-0.0067, 0.7402, -0.0193, -2.0944, -0.0153, 4.4251, 0.7637],
    # [-0.0068, 0.7402, -0.0194, -2.0944, -0.0156, 4.4251, 0.7639],
    # [-0.0070, 0.7402, -0.0195, -2.0944, -0.0159, 4.4251, 0.7641],
    # [-0.0072, 0.7403, -0.0196, -2.0944, -0.0162, 4.4251, 0.7642],
    # [-0.0074, 0.7403, -0.0197, -2.0944, -0.0164, 4.4251, 0.7644],
    # [-0.0076, 0.7403, -0.0198, -2.0943, -0.0167, 4.4251, 0.7645],
    # [-0.0078, 0.7403, -0.0199, -2.0943, -0.0170, 4.4251, 0.7647],
    # [-0.0080, 0.7403, -0.0201, -2.0943, -0.0173, 4.4251, 0.7648],
    # [-0.0082, 0.7403, -0.0202, -2.0943, -0.0176, 4.4251, 0.7650],
    # [-0.0084, 0.7403, -0.0203, -2.0943, -0.0178, 4.4251, 0.7651],
    # [-0.0086, 0.7403, -0.0204, -2.0943, -0.0181, 4.4251, 0.7653],
    # [-0.0088, 0.7403, -0.0205, -2.0943, -0.0184, 4.4250, 0.7655],
    # [-0.0090, 0.7403, -0.0206, -2.0943, -0.0187, 4.4250, 0.7656],
    # [-0.0092, 0.7403, -0.0207, -2.0942, -0.0190, 4.4250, 0.7658],
    # [-0.0094, 0.7403, -0.0208, -2.0942, -0.0193, 4.4250, 0.7659],
    # [-0.0096, 0.7403, -0.0209, -2.0942, -0.0195, 4.4250, 0.7661],
    # [-0.0098, 0.7403, -0.0210, -2.0942, -0.0198, 4.4250, 0.7662],
    # [-0.0100, 0.7403, -0.0211, -2.0942, -0.0201, 4.4250, 0.7664],
    # [-0.0101, 0.7404, -0.0212, -2.0942, -0.0204, 4.4250, 0.7666],

    # 200 Steps
    [0.1447, 0.7604, 0.0609, -2.0564, 0.2024, 4.4207, 0.6405],
    [0.1447, 0.7604, 0.0609, -2.0564, 0.2024, 4.4207, 0.6405],
    [0.1428, 0.7600, 0.0599, -2.0574, 0.1997, 4.4209, 0.6421],
    [0.1408, 0.7595, 0.0589, -2.0585, 0.1969, 4.4211, 0.6438],
    [0.1389, 0.7591, 0.0579, -2.0595, 0.1942, 4.4213, 0.6454],
    [0.1370, 0.7587, 0.0569, -2.0604, 0.1914, 4.4215, 0.6471],
    [0.1350, 0.7583, 0.0559, -2.0614, 0.1887, 4.4217, 0.6487],
    [0.1331, 0.7578, 0.0549, -2.0624, 0.1859, 4.4218, 0.6503],
    [0.1311, 0.7574, 0.0539, -2.0633, 0.1831, 4.4220, 0.6520],
    [0.1292, 0.7571, 0.0529, -2.0642, 0.1804, 4.4222, 0.6536],
    [0.1273, 0.7567, 0.0519, -2.0651, 0.1776, 4.4224, 0.6552],
    [0.1253, 0.7563, 0.0509, -2.0660, 0.1749, 4.4226, 0.6569],
    [0.1234, 0.7559, 0.0499, -2.0669, 0.1721, 4.4227, 0.6585],
    [0.1215, 0.7555, 0.0489, -2.0678, 0.1693, 4.4229, 0.6601],
    [0.1195, 0.7552, 0.0479, -2.0686, 0.1666, 4.4231, 0.6617],
    [0.1176, 0.7548, 0.0469, -2.0695, 0.1638, 4.4232, 0.6633],
    [0.1156, 0.7545, 0.0459, -2.0703, 0.1610, 4.4234, 0.6650],
    [0.1137, 0.7541, 0.0449, -2.0711, 0.1582, 4.4236, 0.6666],
    [0.1118, 0.7538, 0.0438, -2.0719, 0.1555, 4.4237, 0.6682],
    [0.1098, 0.7535, 0.0428, -2.0726, 0.1527, 4.4239, 0.6698],
    [0.1079, 0.7531, 0.0418, -2.0734, 0.1499, 4.4240, 0.6714],
    [0.1060, 0.7528, 0.0408, -2.0742, 0.1471, 4.4242, 0.6730],
    [0.1040, 0.7525, 0.0398, -2.0749, 0.1444, 4.4243, 0.6746],
    [0.1021, 0.7522, 0.0387, -2.0756, 0.1416, 4.4244, 0.6762],
    [0.1001, 0.7519, 0.0377, -2.0763, 0.1388, 4.4246, 0.6778],
    [0.0982, 0.7516, 0.0367, -2.0770, 0.1360, 4.4247, 0.6794],
    [0.0963, 0.7513, 0.0356, -2.0777, 0.1332, 4.4249, 0.6810],
    [0.0943, 0.7511, 0.0346, -2.0783, 0.1304, 4.4250, 0.6826],
    [0.0924, 0.7508, 0.0336, -2.0789, 0.1276, 4.4251, 0.6842],
    [0.0904, 0.7505, 0.0326, -2.0796, 0.1248, 4.4252, 0.6858],
    [0.0885, 0.7503, 0.0315, -2.0802, 0.1220, 4.4254, 0.6874],
    [0.0866, 0.7500, 0.0305, -2.0808, 0.1193, 4.4255, 0.6890],
    [0.0846, 0.7498, 0.0295, -2.0814, 0.1165, 4.4256, 0.6906],
    [0.0827, 0.7495, 0.0284, -2.0819, 0.1137, 4.4257, 0.6922],
    [0.0807, 0.7493, 0.0274, -2.0825, 0.1109, 4.4258, 0.6938],
    [0.0788, 0.7491, 0.0263, -2.0830, 0.1081, 4.4259, 0.6954],
    [0.0769, 0.7489, 0.0253, -2.0835, 0.1053, 4.4260, 0.6969],
    [0.0749, 0.7486, 0.0243, -2.0840, 0.1025, 4.4261, 0.6985],
    [0.0730, 0.7484, 0.0232, -2.0845, 0.0997, 4.4262, 0.7001],
    [0.0710, 0.7482, 0.0222, -2.0850, 0.0969, 4.4263, 0.7017],
    [0.0691, 0.7480, 0.0211, -2.0855, 0.0940, 4.4264, 0.7033],
    [0.0672, 0.7479, 0.0201, -2.0859, 0.0912, 4.4265, 0.7048],
    [0.0652, 0.7477, 0.0190, -2.0863, 0.0884, 4.4266, 0.7064],
    [0.0633, 0.7475, 0.0180, -2.0868, 0.0856, 4.4267, 0.7080],
    [0.0613, 0.7473, 0.0169, -2.0872, 0.0828, 4.4268, 0.7096],
    [0.0594, 0.7472, 0.0159, -2.0875, 0.0800, 4.4269, 0.7112],
    [0.0575, 0.7470, 0.0148, -2.0879, 0.0772, 4.4270, 0.7127],
    [0.0555, 0.7469, 0.0138, -2.0883, 0.0744, 4.4270, 0.7143],
    [0.0536, 0.7467, 0.0127, -2.0886, 0.0716, 4.4271, 0.7159],
    [0.0516, 0.7466, 0.0117, -2.0889, 0.0688, 4.4272, 0.7174],
    [0.0497, 0.7465, 0.0106, -2.0893, 0.0659, 4.4272, 0.7190],
    [0.0477, 0.7463, 0.0096, -2.0896, 0.0631, 4.4273, 0.7206],
    [0.0458, 0.7462, 0.0085, -2.0898, 0.0603, 4.4274, 0.7221],
    [0.0439, 0.7461, 0.0075, -2.0901, 0.0575, 4.4274, 0.7237],
    [0.0419, 0.7460, 0.0064, -2.0904, 0.0547, 4.4275, 0.7253],
    [0.0400, 0.7459, 0.0054, -2.0906, 0.0519, 4.4275, 0.7269],
    [0.0380, 0.7458, 0.0043, -2.0908, 0.0491, 4.4276, 0.7284],
    [0.0361, 0.7457, 0.0033, -2.0910, 0.0462, 4.4276, 0.7300],
    [0.0341, 0.7457, 0.0022, -2.0912, 0.0434, 4.4277, 0.7316],
    [0.0322, 0.7456, 0.0012, -2.0914, 0.0406, 4.4277, 0.7331],
    [0.0303, 0.7455, 0.0001, -2.0916, 0.0378, 4.4278, 0.7347],
    [0.0283, 0.7455, -0.0010, -2.0917, 0.0350, 4.4278, 0.7362],
    [0.0264, 0.7454, -0.0020, -2.0918, 0.0321, 4.4278, 0.7378],
    [0.0244, 0.7454, -0.0031, -2.0920, 0.0293, 4.4279, 0.7394],
    [0.0225, 0.7453, -0.0041, -2.0921, 0.0265, 4.4279, 0.7409],
    [0.0205, 0.7453, -0.0052, -2.0921, 0.0237, 4.4279, 0.7425],
    [0.0186, 0.7453, -0.0062, -2.0922, 0.0209, 4.4279, 0.7441],
    [0.0167, 0.7453, -0.0073, -2.0923, 0.0180, 4.4279, 0.7456],
    [0.0147, 0.7452, -0.0084, -2.0923, 0.0152, 4.4280, 0.7472],
    [0.0128, 0.7452, -0.0094, -2.0924, 0.0124, 4.4280, 0.7487],
    [0.0108, 0.7452, -0.0105, -2.0924, 0.0096, 4.4280, 0.7503],
    [0.0089, 0.7452, -0.0115, -2.0924, 0.0068, 4.4280, 0.7519],
    [0.0069, 0.7453, -0.0126, -2.0924, 0.0040, 4.4280, 0.7534],
    [0.0050, 0.7453, -0.0136, -2.0923, 0.0011, 4.4280, 0.7550],
    [0.0030, 0.7453, -0.0147, -2.0923, -0.0017, 4.4280, 0.7566],
    [0.0011, 0.7453, -0.0158, -2.0922, -0.0045, 4.4280, 0.7581],
    [-0.0008, 0.7454, -0.0168, -2.0921, -0.0073, 4.4280, 0.7597],
    [-0.0028, 0.7454, -0.0179, -2.0921, -0.0101, 4.4280, 0.7612],
    [-0.0047, 0.7455, -0.0189, -2.0919, -0.0130, 4.4280, 0.7628],
    [-0.0067, 0.7455, -0.0200, -2.0918, -0.0158, 4.4280, 0.7644],
    [-0.0086, 0.7456, -0.0210, -2.0917, -0.0186, 4.4279, 0.7659],
    [-0.0106, 0.7457, -0.0221, -2.0915, -0.0214, 4.4279, 0.7675],
    [-0.0125, 0.7457, -0.0232, -2.0914, -0.0242, 4.4279, 0.7691],
    [-0.0144, 0.7458, -0.0242, -2.0912, -0.0271, 4.4279, 0.7706],
    [-0.0164, 0.7459, -0.0253, -2.0910, -0.0299, 4.4278, 0.7722],
    [-0.0183, 0.7460, -0.0263, -2.0908, -0.0327, 4.4278, 0.7737],
    [-0.0203, 0.7461, -0.0274, -2.0906, -0.0355, 4.4278, 0.7753],
    [-0.0222, 0.7462, -0.0284, -2.0903, -0.0383, 4.4277, 0.7769],
    [-0.0242, 0.7463, -0.0295, -2.0901, -0.0411, 4.4277, 0.7784],
    [-0.0261, 0.7465, -0.0305, -2.0898, -0.0439, 4.4277, 0.7800],
    [-0.0281, 0.7466, -0.0316, -2.0895, -0.0468, 4.4276, 0.7816],
    [-0.0300, 0.7467, -0.0326, -2.0892, -0.0496, 4.4276, 0.7831],
    [-0.0319, 0.7469, -0.0337, -2.0889, -0.0524, 4.4275, 0.7847],
    [-0.0339, 0.7470, -0.0347, -2.0886, -0.0552, 4.4275, 0.7863],
    [-0.0358, 0.7472, -0.0358, -2.0883, -0.0580, 4.4274, 0.7879],
    [-0.0378, 0.7473, -0.0368, -2.0879, -0.0608, 4.4273, 0.7894],
    [-0.0397, 0.7475, -0.0379, -2.0875, -0.0636, 4.4273, 0.7910],
    [-0.0417, 0.7477, -0.0389, -2.0871, -0.0664, 4.4272, 0.7926],
    [-0.0436, 0.7479, -0.0400, -2.0867, -0.0692, 4.4272, 0.7941],
    [-0.0456, 0.7480, -0.0410, -2.0863, -0.0720, 4.4271, 0.7957],
    [-0.0475, 0.7482, -0.0421, -2.0859, -0.0748, 4.4270, 0.7973],
    [-0.0494, 0.7484, -0.0431, -2.0854, -0.0776, 4.4269, 0.7989],
    [-0.0514, 0.7486, -0.0442, -2.0850, -0.0804, 4.4269, 0.8004],
    [-0.0533, 0.7489, -0.0452, -2.0845, -0.0832, 4.4268, 0.8020],
    [-0.0553, 0.7491, -0.0462, -2.0840, -0.0860, 4.4267, 0.8036],
    [-0.0572, 0.7493, -0.0473, -2.0835, -0.0888, 4.4266, 0.8052],
    [-0.0592, 0.7495, -0.0483, -2.0830, -0.0916, 4.4265, 0.8068],
    [-0.0611, 0.7498, -0.0494, -2.0824, -0.0944, 4.4264, 0.8083],
    [-0.0631, 0.7500, -0.0504, -2.0819, -0.0972, 4.4263, 0.8099],
    [-0.0650, 0.7503, -0.0514, -2.0813, -0.1000, 4.4262, 0.8115],
    [-0.0669, 0.7505, -0.0525, -2.0807, -0.1028, 4.4261, 0.8131],
    [-0.0689, 0.7508, -0.0535, -2.0801, -0.1056, 4.4260, 0.8147],
    [-0.0708, 0.7511, -0.0545, -2.0795, -0.1084, 4.4259, 0.8163],
    [-0.0728, 0.7513, -0.0556, -2.0789, -0.1112, 4.4258, 0.8179],
    [-0.0747, 0.7516, -0.0566, -2.0783, -0.1140, 4.4257, 0.8195],
    [-0.0767, 0.7519, -0.0576, -2.0776, -0.1167, 4.4256, 0.8210],
    [-0.0786, 0.7522, -0.0586, -2.0769, -0.1195, 4.4255, 0.8226],
    [-0.0806, 0.7525, -0.0597, -2.0763, -0.1223, 4.4253, 0.8242],
    [-0.0825, 0.7528, -0.0607, -2.0756, -0.1251, 4.4252, 0.8258],
    [-0.0844, 0.7531, -0.0617, -2.0748, -0.1279, 4.4251, 0.8274],
    [-0.0864, 0.7534, -0.0627, -2.0741, -0.1306, 4.4250, 0.8290],
    [-0.0883, 0.7538, -0.0638, -2.0734, -0.1334, 4.4248, 0.8306],
    [-0.0903, 0.7541, -0.0648, -2.0726, -0.1362, 4.4247, 0.8322],
    [-0.0922, 0.7545, -0.0658, -2.0718, -0.1389, 4.4245, 0.8338],
    [-0.0942, 0.7548, -0.0668, -2.0710, -0.1417, 4.4244, 0.8355],
    [-0.0961, 0.7552, -0.0678, -2.0702, -0.1445, 4.4243, 0.8371],
    [-0.0981, 0.7555, -0.0688, -2.0694, -0.1473, 4.4241, 0.8387],
    [-0.1000, 0.7559, -0.0698, -2.0686, -0.1500, 4.4240, 0.8403],
    [-0.1019, 0.7563, -0.0709, -2.0677, -0.1528, 4.4238, 0.8419],
    [-0.1039, 0.7566, -0.0719, -2.0669, -0.1555, 4.4237, 0.8435],
    [-0.1058, 0.7570, -0.0729, -2.0660, -0.1583, 4.4235, 0.8451],
    [-0.1078, 0.7574, -0.0739, -2.0651, -0.1610, 4.4234, 0.8468],
    [-0.1097, 0.7578, -0.0749, -2.0642, -0.1638, 4.4232, 0.8484],
    [-0.1117, 0.7582, -0.0759, -2.0633, -0.1666, 4.4230, 0.8500],
    [-0.1136, 0.7586, -0.0769, -2.0623, -0.1693, 4.4229, 0.8516],
    [-0.1156, 0.7591, -0.0779, -2.0614, -0.1721, 4.4227, 0.8533],
    [-0.1175, 0.7595, -0.0789, -2.0604, -0.1748, 4.4225, 0.8549],
    [-0.1194, 0.7599, -0.0799, -2.0594, -0.1775, 4.4223, 0.8565],
    [-0.1214, 0.7604, -0.0808, -2.0584, -0.1803, 4.4222, 0.8582],
    [-0.1233, 0.7608, -0.0818, -2.0574, -0.1830, 4.4220, 0.8598],
    [-0.1253, 0.7613, -0.0828, -2.0564, -0.1858, 4.4218, 0.8614],
    [-0.1272, 0.7617, -0.0838, -2.0553, -0.1885, 4.4216, 0.8631],
    [-0.1292, 0.7622, -0.0848, -2.0543, -0.1912, 4.4214, 0.8647],
    [-0.1311, 0.7627, -0.0858, -2.0532, -0.1940, 4.4212, 0.8664],
    [-0.1330, 0.7631, -0.0867, -2.0521, -0.1967, 4.4210, 0.8680],
    [-0.1350, 0.7636, -0.0877, -2.0510, -0.1994, 4.4208, 0.8697],
    [-0.1369, 0.7641, -0.0887, -2.0499, -0.2021, 4.4206, 0.8713],
    [-0.1389, 0.7646, -0.0897, -2.0487, -0.2048, 4.4204, 0.8730],
    [-0.1408, 0.7651, -0.0906, -2.0476, -0.2076, 4.4202, 0.8746],
    [-0.1428, 0.7656, -0.0916, -2.0464, -0.2103, 4.4200, 0.8763],
    [-0.1447, 0.7662, -0.0926, -2.0452, -0.2130, 4.4198, 0.8780],
    [-0.1466, 0.7667, -0.0935, -2.0440, -0.2157, 4.4196, 0.8796],
    [-0.1486, 0.7672, -0.0945, -2.0428, -0.2184, 4.4194, 0.8813],
    [-0.1505, 0.7677, -0.0955, -2.0416, -0.2211, 4.4192, 0.8830],
    [-0.1525, 0.7683, -0.0964, -2.0404, -0.2238, 4.4189, 0.8846],
    [-0.1544, 0.7688, -0.0974, -2.0391, -0.2265, 4.4187, 0.8863],
    [-0.1564, 0.7694, -0.0983, -2.0378, -0.2292, 4.4185, 0.8880],
    [-0.1583, 0.7700, -0.0993, -2.0366, -0.2319, 4.4183, 0.8897],
    [-0.1603, 0.7705, -0.1002, -2.0352, -0.2346, 4.4180, 0.8914],
    [-0.1622, 0.7711, -0.1012, -2.0339, -0.2373, 4.4178, 0.8930],
    [-0.1641, 0.7717, -0.1021, -2.0326, -0.2400, 4.4176, 0.8947],
    [-0.1661, 0.7723, -0.1030, -2.0313, -0.2427, 4.4173, 0.8964],
    [-0.1680, 0.7729, -0.1040, -2.0299, -0.2453, 4.4171, 0.8981],
    [-0.1700, 0.7735, -0.1049, -2.0285, -0.2480, 4.4168, 0.8998],
    [-0.1719, 0.7741, -0.1059, -2.0271, -0.2507, 4.4166, 0.9015],
    [-0.1739, 0.7747, -0.1068, -2.0257, -0.2534, 4.4163, 0.9032],
    [-0.1758, 0.7753, -0.1077, -2.0243, -0.2560, 4.4161, 0.9049],
    [-0.1777, 0.7760, -0.1086, -2.0229, -0.2587, 4.4158, 0.9066],
    [-0.1797, 0.7766, -0.1096, -2.0214, -0.2614, 4.4156, 0.9084],
    [-0.1816, 0.7773, -0.1105, -2.0199, -0.2640, 4.4153, 0.9101],
    [-0.1836, 0.7779, -0.1114, -2.0184, -0.2667, 4.4150, 0.9118],
    [-0.1855, 0.7786, -0.1123, -2.0169, -0.2693, 4.4148, 0.9135],
    [-0.1875, 0.7792, -0.1132, -2.0154, -0.2720, 4.4145, 0.9152],
    [-0.1894, 0.7799, -0.1141, -2.0139, -0.2746, 4.4142, 0.9170],
    [-0.1914, 0.7806, -0.1150, -2.0124, -0.2773, 4.4140, 0.9187],
    [-0.1933, 0.7813, -0.1159, -2.0108, -0.2799, 4.4137, 0.9204],
    [-0.1952, 0.7820, -0.1168, -2.0092, -0.2826, 4.4134, 0.9222],
    [-0.1972, 0.7827, -0.1177, -2.0076, -0.2852, 4.4131, 0.9239],
    [-0.1991, 0.7834, -0.1186, -2.0060, -0.2878, 4.4128, 0.9257],
    [-0.2011, 0.7841, -0.1195, -2.0044, -0.2905, 4.4126, 0.9274],
    [-0.2030, 0.7848, -0.1204, -2.0028, -0.2931, 4.4123, 0.9292],
    [-0.2050, 0.7855, -0.1213, -2.0011, -0.2957, 4.4120, 0.9309],
    [-0.2069, 0.7863, -0.1222, -1.9994, -0.2983, 4.4117, 0.9327],
    [-0.2088, 0.7870, -0.1230, -1.9978, -0.3010, 4.4114, 0.9344],
    [-0.2108, 0.7877, -0.1239, -1.9961, -0.3036, 4.4111, 0.9362],
    [-0.2127, 0.7885, -0.1248, -1.9943, -0.3062, 4.4108, 0.9380],
    [-0.2147, 0.7893, -0.1257, -1.9926, -0.3088, 4.4105, 0.9398],
    [-0.2166, 0.7900, -0.1265, -1.9909, -0.3114, 4.4102, 0.9415],
    [-0.2186, 0.7908, -0.1274, -1.9891, -0.3140, 4.4099, 0.9433],
    [-0.2205, 0.7916, -0.1283, -1.9873, -0.3166, 4.4095, 0.9451],
    [-0.2225, 0.7924, -0.1291, -1.9855, -0.3192, 4.4092, 0.9469],
    [-0.2244, 0.7932, -0.1300, -1.9837, -0.3218, 4.4089, 0.9487],
    [-0.2264, 0.7940, -0.1308, -1.9819, -0.3244, 4.4086, 0.9505],
    [-0.2283, 0.7948, -0.1317, -1.9801, -0.3270, 4.4083, 0.9523],
    [-0.2302, 0.7956, -0.1325, -1.9782, -0.3295, 4.4079, 0.9541],
    [-0.2322, 0.7964, -0.1334, -1.9763, -0.3321, 4.4076, 0.9559],
    [-0.2341, 0.7972, -0.1342, -1.9745, -0.3347, 4.4073, 0.9577],
    [-0.2361, 0.7981, -0.1350, -1.9726, -0.3373, 4.4069, 0.9595],
    [-0.2380, 0.7989, -0.1359, -1.9706, -0.3398, 4.4066, 0.9613],
    [-0.2400, 0.7998, -0.1367, -1.9687, -0.3424, 4.4063, 0.9631],
    [-0.2419, 0.8006, -0.1375, -1.9668, -0.3450, 4.4059, 0.9650],

    ]


    # For the unloading phase, simply reverse the loading positions.
    unloading_positions = list(reversed(loading_positions))

    # 1. Move to a "reset" or home position before starting (we use the first position from the loading phase)
    reset_joint_positions = loading_positions[0]
    move_to_position(robot_interface, np.array(reset_joint_positions), controller_cfg)
    if stop_movement.is_set():
        return
    # time.sleep(0.5)

    # 2. Loading Phase (event label "1"): move through each discrete position.
    for pos in loading_positions:
        move_to_position(robot_interface, np.array(pos), controller_cfg, event_label="1")
        if stop_movement.is_set():
            return
        # time.sleep(0.5)  # Optional delay between steps

    # 3. Unloading Phase (event label "2"): return along the reversed trajectory.
    for pos in unloading_positions:
        move_to_position(robot_interface, np.array(pos), controller_cfg, event_label="2")
        if stop_movement.is_set():
            return
        # time.sleep(0.5)
    
    # Finally, signal that movement is done.
    movement_done.set()

# Gravity Compensation Function
def perform_gravity_compensation(robot_interface, controller_type, controller_cfg):
    print("Starting gravity compensation at the current position...")
    osc_move(robot_interface, controller_type, controller_cfg, num_steps=200)

def osc_move(robot_interface, controller_type, controller_cfg, num_steps, time_interval=0.01):
    for step in range(num_steps):
        current_pose = robot_interface.last_eef_pose
        z_position = current_pose[2, 3]
        print(f"Step {step}, Current z-axis position: {z_position}")
        action = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0] + [-1.0])
        robot_interface.control(controller_type=controller_type, action=action, controller_cfg=controller_cfg)
        # time.sleep(time_interval)

# Save Data to CSV
def save_data_to_csv():
    date_folder = time.strftime("%Y%m%d")
    time_folder = time.strftime("%H%M%S")
    data_folder = os.path.join("data", date_folder, time_folder)
    os.makedirs(data_folder, exist_ok=True)

    # Save force data
    if force_data:
        force_df = pd.DataFrame(force_data, columns=["Timestamp", "Fx", "Fy", "Fz", "Force Magnitude"])
        force_df.to_csv(os.path.join(data_folder, "force_data.csv"), index=False)

    # Save end-effector positions (X, Y, Z) to CSV
    if eef_positions:
        eef_df = pd.DataFrame(eef_positions, columns=["Timestamp", "X_Offset", "Y_Offset", "Z_Offset"])
        eef_df.to_csv(os.path.join(data_folder, "eef_positions.csv"), index=False)

    # Save Z-position CSV
    z_pos_df = pd.DataFrame({"Timestamp": timestamps, "Y Position": y_positions, "Event": None})
    for timestamp, event in event_markers:
        closest_index = (z_pos_df["Timestamp"] - timestamp).abs().idxmin()  
        z_pos_df.loc[closest_index, "Event"] = event
    z_pos_df.to_csv(os.path.join(data_folder, "y_position_data.csv"), index=False)

    # Save joint positions
    if joint_positions:
        num_joints = len(joint_positions[0]) if isinstance(joint_positions[0], (list, np.ndarray)) else 1
        joint_pos_df = pd.DataFrame(joint_positions, columns=[f"Joint {i+1} Position" for i in range(num_joints)])
        joint_pos_df.to_csv(os.path.join(data_folder, "joint_positions.csv"), index=False)

    # Save torque data
    if torque_data:
        torque_df = pd.DataFrame(torque_data, columns=["Timestamp", "Tx", "Ty", "Tz", "Torque Magnitude"])
        torque_df.to_csv(os.path.join(data_folder, "torque_data.csv"), index=False)

    print(f"Data saved to folder: {data_folder}")
    return data_folder

def plot_merged_data(data_folder):
    # First Figure: Fx, Fy, Fz, Force Magnitude with Z-position
    fig1, ax1 = plt.subplots()

    if force_data:
        times = [entry[0] for entry in force_data]  # Extract timestamps
        Fx = [entry[1] for entry in force_data]    # Extract Fx
        Fy = [entry[2] for entry in force_data]    # Extract Fy
        Fz = [entry[3] for entry in force_data]    # Extract Fz
        force_magnitudes = [entry[4] for entry in force_data]  # Extract force magnitudes

        ax1.plot(times, Fx, label="Fx", color='tab:blue')
        ax1.plot(times, Fy, label="Fy", color='tab:orange')
        ax1.plot(times, Fz, label="Fz", color='tab:green')
        ax1.plot(times, force_magnitudes, label="Force Magnitude", color='tab:red', linestyle='--', linewidth=0.25)

        max_force_magnitude = max(abs(val) for val in force_magnitudes)
        ax1.set_ylim([-(max_force_magnitude + 5), max_force_magnitude + 5])

    ax1.set_xlabel("Time (s)")
    ax1.set_ylabel("Force (N)")
    ax1.legend(loc="upper left")
    ax1.grid(True)

    if timestamps:
        ax2 = ax1.twinx()
        ax2.plot(timestamps, y_positions, label="Y Position", color='tab:purple', marker='o', markersize=2)
        max_z_position = max(abs(val) for val in y_positions)
        ax2.set_ylim([-max_z_position - 0.0025, max_z_position + 0.0025])
        ax2.set_ylabel("Y Position (m)", color='tab:purple')
        ax2.legend(loc="upper right")

    plt.title("Forces (Fx, Fy, Fz, Magnitude) and Y-Position Over Time")
    force_plot_path = os.path.join(data_folder, "force_plot.png")
    plt.savefig(force_plot_path, dpi=1000)
    plt.show()
    plt.close(fig1)

    print(f"Force plot saved to {force_plot_path}")

    # Second Figure: Tx, Ty, Tz, Torque Magnitude with Z-position
    fig2, ax3 = plt.subplots()

    if torque_data:
        times = [entry[0] for entry in torque_data]
        Tx = [entry[1] for entry in torque_data]
        Ty = [entry[2] for entry in torque_data]
        Tz = [entry[3] for entry in torque_data]
        torque_magnitudes = [entry[4] for entry in torque_data]

        ax3.plot(times, Tx, label="Tx", color='tab:blue')
        ax3.plot(times, Ty, label="Ty", color='tab:orange')
        ax3.plot(times, Tz, label="Tz", color='tab:green')
        ax3.plot(times, torque_magnitudes, label="Torque Magnitude", color='tab:red', linestyle='--', linewidth=1)
        max_torque_magnitude = max(abs(val) for val in torque_magnitudes)
        ax3.set_ylim([-(max_torque_magnitude + 5), max_torque_magnitude + 5])

    ax3.set_xlabel("Time (s)")
    ax3.set_ylabel("Torque (Nm)")
    ax3.legend(loc="upper left")
    ax3.grid(True)

    if timestamps:
        ax4 = ax3.twinx()
        ax4.plot(timestamps, y_positions, label="Y Position", color='tab:purple', marker='o', markersize=2)
        max_z_position = max(abs(val) for val in y_positions)
        ax4.set_ylim([-max_z_position - 0.0025, max_z_position + 0.0025])
        ax4.set_ylabel("Y Position (m)", color='tab:purple')
        ax4.legend(loc="upper right")

    plt.title("Torques (Tx, Ty, Tz, Magnitude) and Y-Position Over Time")
    torque_plot_path = os.path.join(data_folder, "torque_plot.png")
    plt.savefig(torque_plot_path, dpi=1000)
    plt.show()
    plt.close(fig2)

    print(f"Torque plot saved to {torque_plot_path}")

    # New Plot for End-Effector X, Y, Z offsets
    if eef_positions:
        fig3, ax5 = plt.subplots(figsize=(10, 6))
        times_eef = [pos[0] for pos in eef_positions]
        x_off = [pos[1] for pos in eef_positions]
        y_off = [pos[2] for pos in eef_positions]
        z_off = [pos[3] for pos in eef_positions]

        ax5.plot(times_eef, x_off, label='X Offset', color='blue')
        ax5.plot(times_eef, y_off, label='Y Offset', color='orange')
        ax5.plot(times_eef, z_off, label='Z Offset', color='green')
        ax5.set_xlabel('Time (s)')
        ax5.set_ylabel('Position Offset (m)')
        ax5.legend(loc='upper left')
        ax5.grid(True)
        ax5.set_title(eef_title)

        eef_plot_path = os.path.join(data_folder, "eef_offset_plot.png")
        plt.savefig(eef_plot_path, dpi=300)
        plt.show()
        plt.close(fig3)

        print(f"Offset end-effector position plot saved to {eef_plot_path}")

    print("All plots generated.")

def main():
    global global_start_time, force_sensor

    args = parse_args()

    # Begin robot interface setup
    try:
        robot_interface = FrankaInterface(config_root + f"/{args.interface_cfg}", use_visualizer=False)
        joint_controller_cfg = YamlConfig(config_root + f"/{args.controller_cfg}").as_easydict()
        osc_controller_cfg = get_default_controller_config(args.controller_type)
        print("Robot interface initialized.")
    except Exception as e:
        print(f"Robot interface initialization failed: {e}")
        return

    global_start_time = time.time()

    # Create data folder path
    date_folder = time.strftime("%Y%m%d")
    time_folder = time.strftime("%H%M%S")
    data_folder = os.path.join("data", date_folder, time_folder)
    os.makedirs(data_folder, exist_ok=True)

    # Start video recording thread if camera is enabled
    if args.enable_camera:
        video_output_path = os.path.join(data_folder, "realsense_recording.mp4")
        video_thread = threading.Thread(target=record_video, args=(video_output_path, video_duration, 30, rs_camera_index), daemon=True)
        video_thread.start()
    else:
        print("Camera recording disabled.")

    # If FT sensor is enabled, initialize and calibrate, then start monitoring thread.
    if args.enable_ft_sensor:
        sensor = initialize_force_sensor_for_calibration()
        if sensor is None:
            print("Sensor initialization failed. Exiting...")
            return

        force_offset, torque_offset = calibrate_force_sensor(sensor)
        if force_offset is None or torque_offset is None:
            print("Calibration failed. Exiting...")
            return

        monitoring_thread = threading.Thread(
            target=monitor_ft_sensor,
            args=(robot_interface, joint_controller_cfg, args.controller_type, osc_controller_cfg, sensor, force_offset, torque_offset),
            daemon=True
        )
        monitoring_thread.start()
    else:
        print("FT sensor monitoring disabled.")

    # Start movement thread using the discrete trajectory
    movement_thread = threading.Thread(target=joint_position_control, args=(robot_interface, joint_controller_cfg), daemon=True)
    movement_thread.start()

    # Wait for threads to finish
    if args.enable_ft_sensor:
        monitoring_thread.join()
    movement_thread.join()
    if args.enable_camera:
        video_thread.join()

    # Save and plot data after threads finish
    data_folder = save_data_to_csv()
    plot_merged_data(data_folder)

    print("Process complete.")

if __name__ == "__main__":
    main()
