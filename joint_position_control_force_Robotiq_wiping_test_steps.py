import os
import sys
import cv2
import numpy as np
import threading
import time
import pandas as pd
import matplotlib.pyplot as plt
from ForceSensor import ForceSensor
from deoxys import config_root
from deoxys.franka_interface import FrankaInterface
from deoxys.utils.config_utils import YamlConfig, get_default_controller_config
from deoxys.utils.log_utils import get_deoxys_example_logger
import argparse
import pyrealsense2 as rs

logger = get_deoxys_example_logger()

# Global variables
force_data = []
torque_data = []
y_positions = []
eef_positions = []    # <-- New global list to store full (x, y, z) end-effector positions
joint_positions = []
joint_velocities = []
timestamps = []
global_start_time = None
force_sensor = None
initial_z_position = None
initial_eef_position = None
max_samples = 20000
video_duration = 600
pressing_time = 2/10
rs_camera_index = 6
Nexigo_camera_index = 0
force_threshold = 15
torque_threshold = 5
force_max = 20  # Set the force_max threshold here
eef_title = "Offset End-Effector Positions (X, Y, Z) Over Time with 2x Kp"

# Event signals
stop_movement = threading.Event()
stop_monitoring = threading.Event()
movement_done = threading.Event()
recording_done = threading.Event()

# Parse command-line arguments (added options to enable/disable FT sensor and camera)
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--interface-cfg", type=str, default="charmander.yml")
    parser.add_argument("--controller-cfg", type=str, default="joint-position-controller.yml")
    parser.add_argument("--controller-type", type=str, default="OSC_POSE")
    # FT sensor toggle: default is disabled here. Use --enable-ft-sensor to enable.
    parser.add_argument("--enable-ft-sensor", dest="enable_ft_sensor", action="store_true", help="Enable force-torque sensor monitoring")
    parser.add_argument("--disable-ft-sensor", dest="enable_ft_sensor", action="store_false", help="Disable force-torque sensor monitoring")
    parser.set_defaults(enable_ft_sensor=False)
    # Camera toggle: default is disabled here. Use --enable-camera to enable.
    parser.add_argument("--enable-camera", dest="enable_camera", action="store_true", help="Enable camera recording")
    parser.add_argument("--disable-camera", dest="enable_camera", action="store_false", help="Disable camera recording")
    parser.set_defaults(enable_camera=False)
    return parser.parse_args()

# FT Sensor Functions
def calibrate_force_sensor(sensor, num_samples=100, sleep_time=0.01):
    """
    Calibrate the force sensor by calculating force and torque offsets.
    """
    try:
        readings = []
        print("Performing calibration...")
        for _ in range(num_samples):
            force, torque = sensor.get_force_obs()
            readings.append((force, torque))
            time.sleep(sleep_time)

        # Calculate offsets
        force_offset = np.mean([r[0] for r in readings], axis=0)
        torque_offset = np.mean([r[1] for r in readings], axis=0)
        print(f"Calibration complete. Force offset: {force_offset}, Torque offset: {torque_offset}")
        return force_offset, torque_offset
    except Exception as e:
        print(f"Error during calibration: {e}")
        return None, None

def initialize_force_sensor_for_calibration():
    """
    Initialize the sensor for calibration without applying offsets.
    """
    try:
        sensor = ForceSensor("/dev/ttyUSB0", np.zeros(3), np.zeros(3))
        sensor.force_sensor_setup()
        print("Sensor initialized for calibration.")
        return sensor
    except Exception as e:
        print(f"Error initializing sensor: {e}")
        return None

def monitor_ft_sensor(robot_interface, joint_controller_cfg, osc_controller_type, osc_controller_cfg, sensor, force_offset, torque_offset):
    """
    Monitor the force-torque sensor with calibration offsets, handle thresholds, and perform gravity compensation when needed.
    """
    global force_data, torque_data, global_start_time
    print("Starting monitoring thread.")
    
    handling_threshold = False  # Flag to indicate if threshold handling is in progress

    try:
        while len(force_data) < max_samples and not stop_monitoring.is_set():
            # Read adjusted force-torque data
            raw_force, raw_torque = sensor.get_force_obs()
            adjusted_force = raw_force - force_offset
            adjusted_torque = raw_torque - torque_offset

            elapsed_time = time.time() - global_start_time
            force_magnitude = np.linalg.norm(adjusted_force)
            torque_magnitude = np.linalg.norm(adjusted_torque)

            # Log the data with extra values
            force_data.append((elapsed_time, *adjusted_force, force_magnitude))
            torque_data.append((elapsed_time, *adjusted_torque, torque_magnitude))

            # Handle maximum force threshold
            if force_magnitude > force_max and not handling_threshold:
                print(f"Force exceeds maximum limit ({force_max} N). Returning to initial position.")
                handling_threshold = True  # Set flag to prevent re-triggering
                stop_movement.set()

                # Start a thread to handle returning to the initial position
                threading.Thread(
                    target=return_to_initial_position,
                    args=(robot_interface, joint_controller_cfg),
                    daemon=True
                ).start()
                stop_movement.clear()
                handling_threshold = False  # Reset flag after handling

            # Handle regular force/torque thresholds
            if not handling_threshold and (force_magnitude > force_threshold or torque_magnitude > torque_threshold):
                print("Threshold exceeded. Switching to gravity compensation.")
                stop_movement.set()
                threading.Thread(
                    target=perform_gravity_compensation,
                    args=(robot_interface, osc_controller_type, osc_controller_cfg),
                    daemon=True
                ).start()
                stop_monitoring.set()
                return

            # Short delay for smoother monitoring
            time.sleep(0.01)

    except Exception as e:
        print(f"Error in monitor_ft_sensor: {e}")

# Video recording function using RealSense camera
def record_video(output_path, duration, fps=30, camera_index=rs_camera_index):
    print(f"Recording video using camera index {camera_index}.")

    # Initialize VideoCapture with the specified camera index
    cap = cv2.VideoCapture(camera_index)
    if not cap.isOpened():
        print(f"Failed to open the camera at index {camera_index}.")
        exit()

    # Get video properties
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # Create a VideoWriter object
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

    start_time = time.time()
    try:
        while time.time() - start_time < duration:
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame. Exiting...")
                break

            # Flip the frame both vertically and horizontally
            flipped_frame = cv2.flip(frame, -1)

            # Write the flipped frame to the video file
            out.write(flipped_frame)

            # Display the flipped frame (optional)
            cv2.imshow('Camera', flipped_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
    finally:
        cap.release()
        out.release()
        cv2.destroyAllWindows()

# Function to return the robot to its initial position
def return_to_initial_position(robot_interface, controller_cfg):
    print("Returning to initial joint positions.")
    reset_joint_positions = [-0.0089260, 0.3819599, -0.0253966, -2.1973930, -0.0307321, 4.1700501, 0.7718912]
    move_to_position(robot_interface, np.array(reset_joint_positions), controller_cfg)
    print("Returning to initial position.")

# Robot Control Functions
def get_end_effector_position(robot_interface):
    ee_pose = robot_interface.last_eef_pose
    position = ee_pose[:3, 3]
    return position

def get_joint_data(robot_interface):
    return robot_interface._state_buffer[-1].q, robot_interface._state_buffer[-1].dq

# Global variable to mark events (used in plotting)
event_markers = []

def move_to_position(robot_interface, target_positions, controller_cfg, event_label=None):
    """
    Moves the robot toward the target joint positions. If the current configuration is far from the target 
    (for example, due to external interference), this function regenerates a smooth trajectory to slow down 
    the motion and avoid a sudden jump.
    """
    global initial_eef_position, eef_positions, event_markers
    action = list(target_positions) + [-1.0]
    start_time = time.time()

    if event_label:
        event_markers.append((time.time() - global_start_time, event_label))

    # Get the current joint position (if available)
    if len(robot_interface._state_buffer) > 0:
        current_joint_pos, _ = get_joint_data(robot_interface)
    else:
        current_joint_pos = target_positions  # fallback if no data is available

    while True:
        if stop_movement.is_set():
            print("Movement stopped due to stop_movement event.")
            break

        if len(robot_interface._state_buffer) > 0:
            current_ee_position = get_end_effector_position(robot_interface)  # shape: (3,)
            joint_pos, joint_vel = get_joint_data(robot_interface)
            joint_positions.append(joint_pos)
            joint_velocities.append(joint_vel)

            # If we haven't stored the initial EEF position yet, store it now
            if initial_eef_position is None:
                initial_eef_position = current_ee_position.copy()

            # Compute the offset relative to the initial position
            offset_x = current_ee_position[0] - initial_eef_position[0]
            offset_y = current_ee_position[1] - initial_eef_position[1]
            offset_z = current_ee_position[2] - initial_eef_position[2]

            current_time = time.time() - global_start_time

            # Store offset (x, y, z) in eef_positions
            eef_positions.append((current_time, offset_x, offset_y, offset_z))

            # Also store the Z offset in y_positions, if desired
            y_positions.append(offset_y)
            timestamps.append(current_time)

            position_error = np.abs(np.array(robot_interface._state_buffer[-1].q) - np.array(target_positions))
            if time.time() - start_time > pressing_time:
                print("Timeout reached. Breaking loop.")
                break
            if np.max(position_error) < 1e-4:
                print("Position error is small. Breaking loop.")
                break

        robot_interface.control(controller_type="JOINT_POSITION", action=action, controller_cfg=controller_cfg)

        if stop_movement.is_set():
            print("Movement interrupted after command.")
            break

        time.sleep(0.005)

# ---------------------------------------------------------------------------
# Discrete Trajectory: Step-by-Step Joint Position Control
# ---------------------------------------------------------------------------
def joint_position_control(robot_interface, controller_cfg):
    """
    Moves the robot through a discrete sequence of joint positions.
    
    The trajectory is split into a loading phase (step-by-step moves) and an unloading phase
    (which returns through the reverse of the loading positions).
    """
    # Define a series of discrete positions for the loading phase
    loading_positions = [

    [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    [0.1439, 0.7550, 0.0607, -2.0593, 0.2019, 4.4180, 0.6406],
    [0.1431, 0.7548, 0.0603, -2.0597, 0.2008, 4.4181, 0.6412],
    [0.1424, 0.7547, 0.0599, -2.0601, 0.1997, 4.4181, 0.6419],
    [0.1416, 0.7545, 0.0595, -2.0605, 0.1986, 4.4182, 0.6425],
    [0.1408, 0.7543, 0.0591, -2.0609, 0.1975, 4.4183, 0.6432],
    [0.1400, 0.7541, 0.0587, -2.0614, 0.1964, 4.4184, 0.6439],
    [0.1393, 0.7540, 0.0583, -2.0618, 0.1953, 4.4184, 0.6445],
    [0.1385, 0.7538, 0.0579, -2.0621, 0.1942, 4.4185, 0.6452],
    [0.1377, 0.7536, 0.0575, -2.0625, 0.1931, 4.4186, 0.6458],
    [0.1369, 0.7535, 0.0571, -2.0629, 0.1920, 4.4187, 0.6465],
    [0.1362, 0.7533, 0.0567, -2.0633, 0.1909, 4.4187, 0.6471],
    [0.1354, 0.7531, 0.0564, -2.0637, 0.1898, 4.4188, 0.6478],
    [0.1346, 0.7530, 0.0560, -2.0641, 0.1887, 4.4189, 0.6485],
    [0.1338, 0.7528, 0.0556, -2.0645, 0.1876, 4.4190, 0.6491],
    [0.1331, 0.7526, 0.0552, -2.0649, 0.1865, 4.4190, 0.6498],
    [0.1323, 0.7525, 0.0548, -2.0652, 0.1853, 4.4191, 0.6504],
    [0.1315, 0.7523, 0.0544, -2.0656, 0.1842, 4.4192, 0.6511],
    [0.1307, 0.7522, 0.0540, -2.0660, 0.1831, 4.4193, 0.6517],
    [0.1300, 0.7520, 0.0536, -2.0664, 0.1820, 4.4193, 0.6524],
    [0.1292, 0.7518, 0.0532, -2.0667, 0.1809, 4.4194, 0.6530],
    [0.1284, 0.7517, 0.0528, -2.0671, 0.1798, 4.4195, 0.6537],
    [0.1276, 0.7515, 0.0524, -2.0675, 0.1787, 4.4195, 0.6543],
    [0.1268, 0.7514, 0.0520, -2.0678, 0.1776, 4.4196, 0.6550],
    [0.1261, 0.7512, 0.0516, -2.0682, 0.1765, 4.4197, 0.6556],
    [0.1253, 0.7511, 0.0512, -2.0685, 0.1754, 4.4197, 0.6563],
    [0.1245, 0.7509, 0.0508, -2.0689, 0.1743, 4.4198, 0.6570],
    [0.1237, 0.7508, 0.0504, -2.0692, 0.1732, 4.4199, 0.6576],
    [0.1230, 0.7506, 0.0500, -2.0696, 0.1721, 4.4199, 0.6583],
    [0.1222, 0.7505, 0.0496, -2.0699, 0.1709, 4.4200, 0.6589],
    [0.1214, 0.7503, 0.0491, -2.0703, 0.1698, 4.4201, 0.6596],
    [0.1206, 0.7502, 0.0487, -2.0706, 0.1687, 4.4201, 0.6602],
    [0.1199, 0.7500, 0.0483, -2.0710, 0.1676, 4.4202, 0.6609],
    [0.1191, 0.7499, 0.0479, -2.0713, 0.1665, 4.4203, 0.6615],
    [0.1183, 0.7497, 0.0475, -2.0716, 0.1654, 4.4203, 0.6622],
    [0.1175, 0.7496, 0.0471, -2.0720, 0.1643, 4.4204, 0.6628],
    [0.1167, 0.7495, 0.0467, -2.0723, 0.1632, 4.4205, 0.6634],
    [0.1160, 0.7493, 0.0463, -2.0726, 0.1621, 4.4205, 0.6641],
    [0.1152, 0.7492, 0.0459, -2.0730, 0.1609, 4.4206, 0.6647],
    [0.1144, 0.7490, 0.0455, -2.0733, 0.1598, 4.4207, 0.6654],
    [0.1136, 0.7489, 0.0451, -2.0736, 0.1587, 4.4207, 0.6660],
    [0.1129, 0.7488, 0.0447, -2.0739, 0.1576, 4.4208, 0.6667],
    [0.1121, 0.7486, 0.0443, -2.0742, 0.1565, 4.4208, 0.6673],
    [0.1113, 0.7485, 0.0439, -2.0745, 0.1554, 4.4209, 0.6680],
    [0.1105, 0.7484, 0.0435, -2.0749, 0.1543, 4.4210, 0.6686],
    [0.1098, 0.7482, 0.0431, -2.0752, 0.1531, 4.4210, 0.6693],
    [0.1090, 0.7481, 0.0427, -2.0755, 0.1520, 4.4211, 0.6699],
    [0.1082, 0.7480, 0.0423, -2.0758, 0.1509, 4.4211, 0.6706],
    [0.1074, 0.7478, 0.0419, -2.0761, 0.1498, 4.4212, 0.6712],
    [0.1066, 0.7477, 0.0415, -2.0764, 0.1487, 4.4213, 0.6718],
    [0.1059, 0.7476, 0.0410, -2.0767, 0.1476, 4.4213, 0.6725],
    [0.1051, 0.7475, 0.0406, -2.0770, 0.1465, 4.4214, 0.6731],
    [0.1043, 0.7473, 0.0402, -2.0773, 0.1453, 4.4214, 0.6738],
    [0.1035, 0.7472, 0.0398, -2.0775, 0.1442, 4.4215, 0.6744],
    [0.1028, 0.7471, 0.0394, -2.0778, 0.1431, 4.4215, 0.6751],
    [0.1020, 0.7470, 0.0390, -2.0781, 0.1420, 4.4216, 0.6757],
    [0.1012, 0.7469, 0.0386, -2.0784, 0.1409, 4.4217, 0.6764],
    [0.1004, 0.7467, 0.0382, -2.0787, 0.1397, 4.4217, 0.6770],
    [0.0996, 0.7466, 0.0378, -2.0790, 0.1386, 4.4218, 0.6776],
    [0.0989, 0.7465, 0.0374, -2.0792, 0.1375, 4.4218, 0.6783],
    [0.0981, 0.7464, 0.0370, -2.0795, 0.1364, 4.4219, 0.6789],
    [0.0973, 0.7463, 0.0365, -2.0798, 0.1353, 4.4219, 0.6796],
    [0.0965, 0.7462, 0.0361, -2.0800, 0.1342, 4.4220, 0.6802],
    [0.0958, 0.7460, 0.0357, -2.0803, 0.1330, 4.4220, 0.6808],
    [0.0950, 0.7459, 0.0353, -2.0806, 0.1319, 4.4221, 0.6815],
    [0.0942, 0.7458, 0.0349, -2.0808, 0.1308, 4.4221, 0.6821],
    [0.0934, 0.7457, 0.0345, -2.0811, 0.1297, 4.4222, 0.6828],
    [0.0927, 0.7456, 0.0341, -2.0813, 0.1286, 4.4222, 0.6834],
    [0.0919, 0.7455, 0.0337, -2.0816, 0.1274, 4.4223, 0.6840],
    [0.0911, 0.7454, 0.0333, -2.0818, 0.1263, 4.4223, 0.6847],
    [0.0903, 0.7453, 0.0329, -2.0821, 0.1252, 4.4224, 0.6853],
    [0.0895, 0.7452, 0.0324, -2.0823, 0.1241, 4.4224, 0.6860],
    [0.0888, 0.7451, 0.0320, -2.0826, 0.1230, 4.4225, 0.6866],
    [0.0880, 0.7450, 0.0316, -2.0828, 0.1218, 4.4225, 0.6872],
    [0.0872, 0.7449, 0.0312, -2.0831, 0.1207, 4.4226, 0.6879],
    [0.0864, 0.7448, 0.0308, -2.0833, 0.1196, 4.4226, 0.6885],
    [0.0857, 0.7447, 0.0304, -2.0835, 0.1185, 4.4227, 0.6891],
    [0.0849, 0.7446, 0.0300, -2.0838, 0.1174, 4.4227, 0.6898],
    [0.0841, 0.7445, 0.0296, -2.0840, 0.1162, 4.4228, 0.6904],
    [0.0833, 0.7444, 0.0291, -2.0842, 0.1151, 4.4228, 0.6911],
    [0.0825, 0.7443, 0.0287, -2.0845, 0.1140, 4.4229, 0.6917],
    [0.0818, 0.7442, 0.0283, -2.0847, 0.1129, 4.4229, 0.6923],
    [0.0810, 0.7441, 0.0279, -2.0849, 0.1117, 4.4229, 0.6930],
    [0.0802, 0.7440, 0.0275, -2.0851, 0.1106, 4.4230, 0.6936],
    [0.0794, 0.7439, 0.0271, -2.0853, 0.1095, 4.4230, 0.6942],
    [0.0786, 0.7438, 0.0267, -2.0855, 0.1084, 4.4231, 0.6949],
    [0.0779, 0.7437, 0.0262, -2.0857, 0.1072, 4.4231, 0.6955],
    [0.0771, 0.7436, 0.0258, -2.0860, 0.1061, 4.4232, 0.6961],
    [0.0763, 0.7436, 0.0254, -2.0862, 0.1050, 4.4232, 0.6968],
    [0.0755, 0.7435, 0.0250, -2.0864, 0.1039, 4.4232, 0.6974],
    [0.0748, 0.7434, 0.0246, -2.0866, 0.1028, 4.4233, 0.6981],
    [0.0740, 0.7433, 0.0242, -2.0868, 0.1016, 4.4233, 0.6987],
    [0.0732, 0.7432, 0.0237, -2.0870, 0.1005, 4.4234, 0.6993],
    [0.0724, 0.7431, 0.0233, -2.0872, 0.0994, 4.4234, 0.7000],
    [0.0716, 0.7431, 0.0229, -2.0873, 0.0983, 4.4234, 0.7006],
    [0.0709, 0.7430, 0.0225, -2.0875, 0.0971, 4.4235, 0.7012],
    [0.0701, 0.7429, 0.0221, -2.0877, 0.0960, 4.4235, 0.7019],
    [0.0693, 0.7428, 0.0217, -2.0879, 0.0949, 4.4236, 0.7025],
    [0.0685, 0.7427, 0.0213, -2.0881, 0.0937, 4.4236, 0.7031],
    [0.0678, 0.7427, 0.0208, -2.0883, 0.0926, 4.4236, 0.7038],
    [0.0670, 0.7426, 0.0204, -2.0884, 0.0915, 4.4237, 0.7044],
    [0.0662, 0.7425, 0.0200, -2.0886, 0.0904, 4.4237, 0.7050],
    [0.0654, 0.7425, 0.0196, -2.0888, 0.0892, 4.4237, 0.7057],
    [0.0646, 0.7424, 0.0192, -2.0890, 0.0881, 4.4238, 0.7063],
    [0.0639, 0.7423, 0.0188, -2.0891, 0.0870, 4.4238, 0.7069],
    [0.0631, 0.7422, 0.0183, -2.0893, 0.0859, 4.4238, 0.7076],
    [0.0623, 0.7422, 0.0179, -2.0895, 0.0847, 4.4239, 0.7082],
    [0.0615, 0.7421, 0.0175, -2.0896, 0.0836, 4.4239, 0.7088],
    [0.0607, 0.7420, 0.0171, -2.0898, 0.0825, 4.4239, 0.7094],
    [0.0600, 0.7420, 0.0167, -2.0899, 0.0814, 4.4240, 0.7101],
    [0.0592, 0.7419, 0.0162, -2.0901, 0.0802, 4.4240, 0.7107],
    [0.0584, 0.7418, 0.0158, -2.0902, 0.0791, 4.4240, 0.7113],
    [0.0576, 0.7418, 0.0154, -2.0904, 0.0780, 4.4241, 0.7120],
    [0.0569, 0.7417, 0.0150, -2.0905, 0.0768, 4.4241, 0.7126],
    [0.0561, 0.7417, 0.0146, -2.0907, 0.0757, 4.4241, 0.7132],
    [0.0553, 0.7416, 0.0142, -2.0908, 0.0746, 4.4242, 0.7139],
    [0.0545, 0.7415, 0.0137, -2.0910, 0.0735, 4.4242, 0.7145],
    [0.0537, 0.7415, 0.0133, -2.0911, 0.0723, 4.4242, 0.7151],
    [0.0530, 0.7414, 0.0129, -2.0912, 0.0712, 4.4242, 0.7158],
    [0.0522, 0.7414, 0.0125, -2.0914, 0.0701, 4.4243, 0.7164],
    [0.0514, 0.7413, 0.0121, -2.0915, 0.0689, 4.4243, 0.7170],
    [0.0506, 0.7413, 0.0116, -2.0916, 0.0678, 4.4243, 0.7176],
    [0.0498, 0.7412, 0.0112, -2.0917, 0.0667, 4.4243, 0.7183],
    [0.0491, 0.7412, 0.0108, -2.0919, 0.0656, 4.4244, 0.7189],
    [0.0483, 0.7411, 0.0104, -2.0920, 0.0644, 4.4244, 0.7195],
    [0.0475, 0.7411, 0.0100, -2.0921, 0.0633, 4.4244, 0.7202],
    [0.0467, 0.7410, 0.0095, -2.0922, 0.0622, 4.4244, 0.7208],
    [0.0460, 0.7410, 0.0091, -2.0923, 0.0610, 4.4245, 0.7214],
    [0.0452, 0.7409, 0.0087, -2.0924, 0.0599, 4.4245, 0.7220],
    [0.0444, 0.7409, 0.0083, -2.0925, 0.0588, 4.4245, 0.7227],
    [0.0436, 0.7408, 0.0079, -2.0926, 0.0577, 4.4245, 0.7233],
    [0.0428, 0.7408, 0.0074, -2.0927, 0.0565, 4.4246, 0.7239],
    [0.0421, 0.7408, 0.0070, -2.0928, 0.0554, 4.4246, 0.7246],
    [0.0413, 0.7407, 0.0066, -2.0929, 0.0543, 4.4246, 0.7252],
    [0.0405, 0.7407, 0.0062, -2.0930, 0.0531, 4.4246, 0.7258],
    [0.0397, 0.7406, 0.0058, -2.0931, 0.0520, 4.4246, 0.7264],
    [0.0389, 0.7406, 0.0053, -2.0932, 0.0509, 4.4247, 0.7271],
    [0.0382, 0.7406, 0.0049, -2.0933, 0.0497, 4.4247, 0.7277],
    [0.0374, 0.7405, 0.0045, -2.0934, 0.0486, 4.4247, 0.7283],
    [0.0366, 0.7405, 0.0041, -2.0935, 0.0475, 4.4247, 0.7290],
    [0.0358, 0.7405, 0.0037, -2.0936, 0.0464, 4.4247, 0.7296],
    [0.0351, 0.7404, 0.0032, -2.0936, 0.0452, 4.4248, 0.7302],
    [0.0343, 0.7404, 0.0028, -2.0937, 0.0441, 4.4248, 0.7308],
    [0.0335, 0.7404, 0.0024, -2.0938, 0.0430, 4.4248, 0.7315],
    [0.0327, 0.7403, 0.0020, -2.0939, 0.0418, 4.4248, 0.7321],
    [0.0319, 0.7403, 0.0016, -2.0939, 0.0407, 4.4248, 0.7327],
    [0.0312, 0.7403, 0.0011, -2.0940, 0.0396, 4.4248, 0.7334],
    [0.0304, 0.7403, 0.0007, -2.0941, 0.0384, 4.4249, 0.7340],
    [0.0296, 0.7402, 0.0003, -2.0941, 0.0373, 4.4249, 0.7346],
    [0.0288, 0.7402, -0.0001, -2.0942, 0.0362, 4.4249, 0.7352],
    [0.0280, 0.7402, -0.0006, -2.0943, 0.0350, 4.4249, 0.7359],
    [0.0273, 0.7402, -0.0010, -2.0943, 0.0339, 4.4249, 0.7365],
    [0.0265, 0.7402, -0.0014, -2.0944, 0.0328, 4.4249, 0.7371],
    [0.0257, 0.7401, -0.0018, -2.0944, 0.0317, 4.4249, 0.7377],
    [0.0249, 0.7401, -0.0022, -2.0945, 0.0305, 4.4250, 0.7384],
    [0.0241, 0.7401, -0.0027, -2.0945, 0.0294, 4.4250, 0.7390],
    [0.0234, 0.7401, -0.0031, -2.0945, 0.0283, 4.4250, 0.7396],
    [0.0226, 0.7401, -0.0035, -2.0946, 0.0271, 4.4250, 0.7402],
    [0.0218, 0.7401, -0.0039, -2.0946, 0.0260, 4.4250, 0.7409],
    [0.0210, 0.7400, -0.0043, -2.0947, 0.0249, 4.4250, 0.7415],
    [0.0202, 0.7400, -0.0048, -2.0947, 0.0237, 4.4250, 0.7421],
    [0.0195, 0.7400, -0.0052, -2.0947, 0.0226, 4.4250, 0.7428],
    [0.0187, 0.7400, -0.0056, -2.0948, 0.0215, 4.4250, 0.7434],
    [0.0179, 0.7400, -0.0060, -2.0948, 0.0203, 4.4250, 0.7440],
    [0.0171, 0.7400, -0.0065, -2.0948, 0.0192, 4.4251, 0.7446],
    [0.0164, 0.7400, -0.0069, -2.0948, 0.0181, 4.4251, 0.7453],
    [0.0156, 0.7400, -0.0073, -2.0949, 0.0169, 4.4251, 0.7459],
    [0.0148, 0.7400, -0.0077, -2.0949, 0.0158, 4.4251, 0.7465],
    [0.0140, 0.7400, -0.0081, -2.0949, 0.0147, 4.4251, 0.7471],
    [0.0132, 0.7400, -0.0086, -2.0949, 0.0136, 4.4251, 0.7478],
    [0.0125, 0.7400, -0.0090, -2.0949, 0.0124, 4.4251, 0.7484],
    [0.0117, 0.7400, -0.0094, -2.0949, 0.0113, 4.4251, 0.7490],
    [0.0109, 0.7400, -0.0098, -2.0949, 0.0102, 4.4251, 0.7496],
    [0.0101, 0.7400, -0.0102, -2.0949, 0.0090, 4.4251, 0.7503],
    [0.0093, 0.7400, -0.0107, -2.0949, 0.0079, 4.4251, 0.7509],
    [0.0086, 0.7400, -0.0111, -2.0949, 0.0068, 4.4251, 0.7515],
    [0.0078, 0.7400, -0.0115, -2.0949, 0.0056, 4.4251, 0.7521],
    [0.0070, 0.7400, -0.0119, -2.0949, 0.0045, 4.4251, 0.7528],
    [0.0062, 0.7400, -0.0124, -2.0949, 0.0034, 4.4251, 0.7534],
    [0.0054, 0.7400, -0.0128, -2.0949, 0.0022, 4.4251, 0.7540],
    [0.0047, 0.7400, -0.0132, -2.0949, 0.0011, 4.4251, 0.7547],
    [0.0039, 0.7400, -0.0136, -2.0949, -0.0000, 4.4251, 0.7553],
    [0.0031, 0.7400, -0.0140, -2.0948, -0.0012, 4.4251, 0.7559],
    [0.0023, 0.7400, -0.0145, -2.0948, -0.0023, 4.4251, 0.7565],
    [0.0015, 0.7400, -0.0149, -2.0948, -0.0034, 4.4251, 0.7572],
    [0.0008, 0.7401, -0.0153, -2.0948, -0.0045, 4.4251, 0.7578],
    [-0.0000, 0.7401, -0.0157, -2.0947, -0.0057, 4.4251, 0.7584],
    [-0.0008, 0.7401, -0.0162, -2.0947, -0.0068, 4.4251, 0.7590],
    [-0.0016, 0.7401, -0.0166, -2.0947, -0.0079, 4.4251, 0.7597],
    [-0.0024, 0.7401, -0.0170, -2.0946, -0.0091, 4.4251, 0.7603],
    [-0.0031, 0.7401, -0.0174, -2.0946, -0.0102, 4.4251, 0.7609],
    [-0.0039, 0.7402, -0.0178, -2.0946, -0.0113, 4.4251, 0.7615],
    [-0.0047, 0.7402, -0.0183, -2.0945, -0.0125, 4.4251, 0.7622],
    [-0.0055, 0.7402, -0.0187, -2.0945, -0.0136, 4.4251, 0.7628],
    [-0.0063, 0.7402, -0.0191, -2.0944, -0.0147, 4.4251, 0.7634],
    [-0.0070, 0.7402, -0.0195, -2.0944, -0.0159, 4.4251, 0.7640],
    [-0.0078, 0.7403, -0.0199, -2.0943, -0.0170, 4.4251, 0.7647],
    [-0.0086, 0.7403, -0.0204, -2.0943, -0.0181, 4.4251, 0.7653],
    [-0.0094, 0.7403, -0.0208, -2.0942, -0.0193, 4.4250, 0.7659],
    [-0.0101, 0.7404, -0.0212, -2.0942, -0.0204, 4.4250, 0.7666],

    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1434, 0.7549, 0.0604, -2.0596, 0.2012, 4.4180, 0.6410],
    # [0.1421, 0.7546, 0.0598, -2.0603, 0.1993, 4.4182, 0.6421],
    # [0.1408, 0.7543, 0.0591, -2.0610, 0.1975, 4.4183, 0.6432],
    # [0.1395, 0.7540, 0.0585, -2.0616, 0.1956, 4.4184, 0.6443],
    # [0.1382, 0.7537, 0.0578, -2.0623, 0.1938, 4.4185, 0.6454],
    # [0.1369, 0.7535, 0.0571, -2.0630, 0.1919, 4.4187, 0.6465],
    # [0.1356, 0.7532, 0.0565, -2.0636, 0.1901, 4.4188, 0.6476],
    # [0.1343, 0.7529, 0.0558, -2.0642, 0.1882, 4.4189, 0.6487],
    # [0.1330, 0.7526, 0.0551, -2.0649, 0.1864, 4.4190, 0.6498],
    # [0.1317, 0.7524, 0.0545, -2.0655, 0.1845, 4.4192, 0.6509],
    # [0.1304, 0.7521, 0.0538, -2.0661, 0.1827, 4.4193, 0.6520],
    # [0.1291, 0.7518, 0.0531, -2.0668, 0.1808, 4.4194, 0.6531],
    # [0.1278, 0.7516, 0.0525, -2.0674, 0.1790, 4.4195, 0.6542],
    # [0.1265, 0.7513, 0.0518, -2.0680, 0.1771, 4.4196, 0.6553],
    # [0.1252, 0.7511, 0.0511, -2.0686, 0.1753, 4.4197, 0.6564],
    # [0.1239, 0.7508, 0.0505, -2.0692, 0.1734, 4.4199, 0.6574],
    # [0.1226, 0.7505, 0.0498, -2.0697, 0.1716, 4.4200, 0.6585],
    # [0.1213, 0.7503, 0.0491, -2.0703, 0.1697, 4.4201, 0.6596],
    # [0.1200, 0.7501, 0.0484, -2.0709, 0.1679, 4.4202, 0.6607],
    # [0.1187, 0.7498, 0.0478, -2.0715, 0.1660, 4.4203, 0.6618],
    # [0.1174, 0.7496, 0.0471, -2.0720, 0.1641, 4.4204, 0.6629],
    # [0.1161, 0.7493, 0.0464, -2.0726, 0.1623, 4.4205, 0.6640],
    # [0.1148, 0.7491, 0.0457, -2.0731, 0.1604, 4.4206, 0.6650],
    # [0.1135, 0.7489, 0.0451, -2.0736, 0.1586, 4.4207, 0.6661],
    # [0.1122, 0.7487, 0.0444, -2.0742, 0.1567, 4.4208, 0.6672],
    # [0.1109, 0.7484, 0.0437, -2.0747, 0.1548, 4.4209, 0.6683],
    # [0.1096, 0.7482, 0.0430, -2.0752, 0.1530, 4.4210, 0.6694],
    # [0.1083, 0.7480, 0.0423, -2.0757, 0.1511, 4.4211, 0.6704],
    # [0.1070, 0.7478, 0.0417, -2.0762, 0.1492, 4.4212, 0.6715],
    # [0.1057, 0.7476, 0.0410, -2.0767, 0.1474, 4.4213, 0.6726],
    # [0.1044, 0.7474, 0.0403, -2.0772, 0.1455, 4.4214, 0.6737],
    # [0.1031, 0.7472, 0.0396, -2.0777, 0.1436, 4.4215, 0.6748],
    # [0.1018, 0.7470, 0.0389, -2.0782, 0.1418, 4.4216, 0.6758],
    # [0.1005, 0.7468, 0.0382, -2.0786, 0.1399, 4.4217, 0.6769],
    # [0.0992, 0.7466, 0.0376, -2.0791, 0.1380, 4.4218, 0.6780],
    # [0.0979, 0.7464, 0.0369, -2.0796, 0.1362, 4.4219, 0.6790],
    # [0.0966, 0.7462, 0.0362, -2.0800, 0.1343, 4.4220, 0.6801],
    # [0.0953, 0.7460, 0.0355, -2.0805, 0.1324, 4.4221, 0.6812],
    # [0.0940, 0.7458, 0.0348, -2.0809, 0.1306, 4.4221, 0.6823],
    # [0.0927, 0.7456, 0.0341, -2.0813, 0.1287, 4.4222, 0.6833],
    # [0.0914, 0.7454, 0.0334, -2.0817, 0.1268, 4.4223, 0.6844],
    # [0.0901, 0.7453, 0.0328, -2.0822, 0.1249, 4.4224, 0.6855],
    # [0.0888, 0.7451, 0.0321, -2.0826, 0.1231, 4.4225, 0.6865],
    # [0.0875, 0.7449, 0.0314, -2.0830, 0.1212, 4.4226, 0.6876],
    # [0.0862, 0.7447, 0.0307, -2.0834, 0.1193, 4.4226, 0.6887],
    # [0.0849, 0.7446, 0.0300, -2.0838, 0.1174, 4.4227, 0.6897],
    # [0.0836, 0.7444, 0.0293, -2.0841, 0.1156, 4.4228, 0.6908],
    # [0.0823, 0.7443, 0.0286, -2.0845, 0.1137, 4.4229, 0.6919],
    # [0.0810, 0.7441, 0.0279, -2.0849, 0.1118, 4.4229, 0.6929],
    # [0.0797, 0.7439, 0.0272, -2.0852, 0.1099, 4.4230, 0.6940],
    # [0.0784, 0.7438, 0.0265, -2.0856, 0.1080, 4.4231, 0.6951],
    # [0.0771, 0.7436, 0.0258, -2.0860, 0.1062, 4.4232, 0.6961],
    # [0.0758, 0.7435, 0.0251, -2.0863, 0.1043, 4.4232, 0.6972],
    # [0.0745, 0.7434, 0.0245, -2.0866, 0.1024, 4.4233, 0.6982],
    # [0.0732, 0.7432, 0.0238, -2.0870, 0.1005, 4.4234, 0.6993],
    # [0.0719, 0.7431, 0.0231, -2.0873, 0.0986, 4.4234, 0.7004],
    # [0.0706, 0.7430, 0.0224, -2.0876, 0.0968, 4.4235, 0.7014],
    # [0.0693, 0.7428, 0.0217, -2.0879, 0.0949, 4.4236, 0.7025],
    # [0.0680, 0.7427, 0.0210, -2.0882, 0.0930, 4.4236, 0.7035],
    # [0.0667, 0.7426, 0.0203, -2.0885, 0.0911, 4.4237, 0.7046],
    # [0.0654, 0.7424, 0.0196, -2.0888, 0.0892, 4.4237, 0.7057],
    # [0.0641, 0.7423, 0.0189, -2.0891, 0.0874, 4.4238, 0.7067],
    # [0.0628, 0.7422, 0.0182, -2.0894, 0.0855, 4.4238, 0.7078],
    # [0.0615, 0.7421, 0.0175, -2.0896, 0.0836, 4.4239, 0.7088],
    # [0.0602, 0.7420, 0.0168, -2.0899, 0.0817, 4.4240, 0.7099],
    # [0.0589, 0.7419, 0.0161, -2.0901, 0.0798, 4.4240, 0.7109],
    # [0.0576, 0.7418, 0.0154, -2.0904, 0.0779, 4.4241, 0.7120],
    # [0.0563, 0.7417, 0.0147, -2.0906, 0.0760, 4.4241, 0.7131],
    # [0.0550, 0.7416, 0.0140, -2.0909, 0.0742, 4.4242, 0.7141],
    # [0.0537, 0.7415, 0.0133, -2.0911, 0.0723, 4.4242, 0.7152],
    # [0.0524, 0.7414, 0.0126, -2.0913, 0.0704, 4.4243, 0.7162],
    # [0.0511, 0.7413, 0.0119, -2.0915, 0.0685, 4.4243, 0.7173],
    # [0.0498, 0.7412, 0.0112, -2.0917, 0.0666, 4.4243, 0.7183],
    # [0.0485, 0.7411, 0.0105, -2.0919, 0.0647, 4.4244, 0.7194],
    # [0.0472, 0.7411, 0.0098, -2.0921, 0.0628, 4.4244, 0.7204],
    # [0.0459, 0.7410, 0.0091, -2.0923, 0.0609, 4.4245, 0.7215],
    # [0.0446, 0.7409, 0.0084, -2.0925, 0.0591, 4.4245, 0.7225],
    # [0.0433, 0.7408, 0.0077, -2.0927, 0.0572, 4.4246, 0.7236],
    # [0.0420, 0.7408, 0.0070, -2.0929, 0.0553, 4.4246, 0.7246],
    # [0.0407, 0.7407, 0.0063, -2.0930, 0.0534, 4.4246, 0.7257],
    # [0.0394, 0.7406, 0.0056, -2.0932, 0.0515, 4.4247, 0.7267],
    # [0.0381, 0.7406, 0.0049, -2.0933, 0.0496, 4.4247, 0.7278],
    # [0.0368, 0.7405, 0.0042, -2.0935, 0.0477, 4.4247, 0.7288],
    # [0.0355, 0.7405, 0.0035, -2.0936, 0.0458, 4.4248, 0.7299],
    # [0.0342, 0.7404, 0.0028, -2.0937, 0.0439, 4.4248, 0.7309],
    # [0.0329, 0.7404, 0.0021, -2.0939, 0.0420, 4.4248, 0.7320],
    # [0.0316, 0.7403, 0.0013, -2.0940, 0.0402, 4.4248, 0.7330],
    # [0.0303, 0.7403, 0.0006, -2.0941, 0.0383, 4.4249, 0.7341],
    # [0.0290, 0.7402, -0.0001, -2.0942, 0.0364, 4.4249, 0.7351],
    # [0.0276, 0.7402, -0.0008, -2.0943, 0.0345, 4.4249, 0.7362],
    # [0.0263, 0.7402, -0.0015, -2.0944, 0.0326, 4.4249, 0.7372],
    # [0.0250, 0.7401, -0.0022, -2.0945, 0.0307, 4.4250, 0.7383],
    # [0.0237, 0.7401, -0.0029, -2.0945, 0.0288, 4.4250, 0.7393],
    # [0.0224, 0.7401, -0.0036, -2.0946, 0.0269, 4.4250, 0.7404],
    # [0.0211, 0.7400, -0.0043, -2.0947, 0.0250, 4.4250, 0.7414],
    # [0.0198, 0.7400, -0.0050, -2.0947, 0.0231, 4.4250, 0.7425],
    # [0.0185, 0.7400, -0.0057, -2.0948, 0.0212, 4.4250, 0.7435],
    # [0.0172, 0.7400, -0.0064, -2.0948, 0.0193, 4.4250, 0.7446],
    # [0.0159, 0.7400, -0.0071, -2.0948, 0.0175, 4.4251, 0.7456],
    # [0.0146, 0.7400, -0.0078, -2.0949, 0.0156, 4.4251, 0.7467],
    # [0.0133, 0.7400, -0.0085, -2.0949, 0.0137, 4.4251, 0.7477],
    # [0.0120, 0.7400, -0.0092, -2.0949, 0.0118, 4.4251, 0.7488],
    # [0.0107, 0.7400, -0.0099, -2.0949, 0.0099, 4.4251, 0.7498],
    # [0.0094, 0.7400, -0.0106, -2.0949, 0.0080, 4.4251, 0.7508],
    # [0.0081, 0.7400, -0.0113, -2.0949, 0.0061, 4.4251, 0.7519],
    # [0.0068, 0.7400, -0.0120, -2.0949, 0.0042, 4.4251, 0.7529],
    # [0.0055, 0.7400, -0.0128, -2.0949, 0.0023, 4.4251, 0.7540],
    # [0.0042, 0.7400, -0.0135, -2.0949, 0.0004, 4.4251, 0.7550],
    # [0.0029, 0.7400, -0.0142, -2.0948, -0.0015, 4.4251, 0.7561],
    # [0.0016, 0.7400, -0.0149, -2.0948, -0.0034, 4.4251, 0.7571],
    # [0.0003, 0.7401, -0.0156, -2.0948, -0.0053, 4.4251, 0.7582],
    # [-0.0010, 0.7401, -0.0163, -2.0947, -0.0071, 4.4251, 0.7592],
    # [-0.0023, 0.7401, -0.0170, -2.0947, -0.0090, 4.4251, 0.7603],
    # [-0.0036, 0.7401, -0.0177, -2.0946, -0.0109, 4.4251, 0.7613],
    # [-0.0049, 0.7402, -0.0184, -2.0945, -0.0128, 4.4251, 0.7624],
    # [-0.0062, 0.7402, -0.0191, -2.0944, -0.0147, 4.4251, 0.7634],
    # [-0.0075, 0.7403, -0.0198, -2.0944, -0.0166, 4.4251, 0.7645],
    # [-0.0088, 0.7403, -0.0205, -2.0943, -0.0185, 4.4250, 0.7655],
    # [-0.0101, 0.7404, -0.0212, -2.0942, -0.0204, 4.4250, 0.7666],

    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1427, 0.7548, 0.0601, -2.0599, 0.2002, 4.4181, 0.6416],
    # [0.1408, 0.7543, 0.0591, -2.0610, 0.1975, 4.4183, 0.6432],
    # [0.1388, 0.7539, 0.0581, -2.0620, 0.1947, 4.4185, 0.6449],
    # [0.1369, 0.7534, 0.0571, -2.0630, 0.1919, 4.4187, 0.6465],
    # [0.1349, 0.7530, 0.0561, -2.0640, 0.1891, 4.4189, 0.6482],
    # [0.1330, 0.7526, 0.0551, -2.0649, 0.1863, 4.4190, 0.6498],
    # [0.1310, 0.7522, 0.0541, -2.0659, 0.1835, 4.4192, 0.6515],
    # [0.1291, 0.7518, 0.0531, -2.0668, 0.1808, 4.4194, 0.6531],
    # [0.1271, 0.7514, 0.0521, -2.0677, 0.1780, 4.4196, 0.6548],
    # [0.1251, 0.7510, 0.0511, -2.0686, 0.1752, 4.4198, 0.6564],
    # [0.1232, 0.7507, 0.0501, -2.0695, 0.1724, 4.4199, 0.6581],
    # [0.1212, 0.7503, 0.0491, -2.0704, 0.1696, 4.4201, 0.6597],
    # [0.1193, 0.7499, 0.0480, -2.0712, 0.1668, 4.4203, 0.6613],
    # [0.1173, 0.7496, 0.0470, -2.0721, 0.1640, 4.4204, 0.6630],
    # [0.1154, 0.7492, 0.0460, -2.0729, 0.1612, 4.4206, 0.6646],
    # [0.1134, 0.7489, 0.0450, -2.0737, 0.1584, 4.4207, 0.6662],
    # [0.1114, 0.7485, 0.0440, -2.0745, 0.1556, 4.4209, 0.6679],
    # [0.1095, 0.7482, 0.0429, -2.0753, 0.1528, 4.4210, 0.6695],
    # [0.1075, 0.7479, 0.0419, -2.0760, 0.1500, 4.4212, 0.6711],
    # [0.1056, 0.7475, 0.0409, -2.0768, 0.1471, 4.4213, 0.6727],
    # [0.1036, 0.7472, 0.0399, -2.0775, 0.1443, 4.4215, 0.6744],
    # [0.1017, 0.7469, 0.0388, -2.0782, 0.1415, 4.4216, 0.6760],
    # [0.0997, 0.7466, 0.0378, -2.0789, 0.1387, 4.4218, 0.6776],
    # [0.0977, 0.7463, 0.0368, -2.0796, 0.1359, 4.4219, 0.6792],
    # [0.0958, 0.7460, 0.0357, -2.0803, 0.1331, 4.4220, 0.6808],
    # [0.0938, 0.7458, 0.0347, -2.0810, 0.1303, 4.4222, 0.6824],
    # [0.0919, 0.7455, 0.0337, -2.0816, 0.1274, 4.4223, 0.6841],
    # [0.0899, 0.7452, 0.0326, -2.0822, 0.1246, 4.4224, 0.6857],
    # [0.0879, 0.7450, 0.0316, -2.0828, 0.1218, 4.4225, 0.6873],
    # [0.0860, 0.7447, 0.0306, -2.0834, 0.1190, 4.4227, 0.6889],
    # [0.0840, 0.7445, 0.0295, -2.0840, 0.1161, 4.4228, 0.6905],
    # [0.0821, 0.7442, 0.0285, -2.0846, 0.1133, 4.4229, 0.6921],
    # [0.0801, 0.7440, 0.0274, -2.0851, 0.1105, 4.4230, 0.6937],
    # [0.0781, 0.7438, 0.0264, -2.0857, 0.1076, 4.4231, 0.6953],
    # [0.0762, 0.7435, 0.0253, -2.0862, 0.1048, 4.4232, 0.6969],
    # [0.0742, 0.7433, 0.0243, -2.0867, 0.1020, 4.4233, 0.6985],
    # [0.0723, 0.7431, 0.0232, -2.0872, 0.0991, 4.4234, 0.7001],
    # [0.0703, 0.7429, 0.0222, -2.0877, 0.0963, 4.4235, 0.7017],
    # [0.0683, 0.7427, 0.0212, -2.0881, 0.0935, 4.4236, 0.7033],
    # [0.0664, 0.7425, 0.0201, -2.0886, 0.0906, 4.4237, 0.7049],
    # [0.0644, 0.7424, 0.0191, -2.0890, 0.0878, 4.4238, 0.7065],
    # [0.0625, 0.7422, 0.0180, -2.0894, 0.0850, 4.4239, 0.7081],
    # [0.0605, 0.7420, 0.0169, -2.0898, 0.0821, 4.4239, 0.7096],
    # [0.0585, 0.7419, 0.0159, -2.0902, 0.0793, 4.4240, 0.7112],
    # [0.0566, 0.7417, 0.0148, -2.0906, 0.0764, 4.4241, 0.7128],
    # [0.0546, 0.7416, 0.0138, -2.0909, 0.0736, 4.4242, 0.7144],
    # [0.0527, 0.7414, 0.0127, -2.0913, 0.0708, 4.4242, 0.7160],
    # [0.0507, 0.7413, 0.0117, -2.0916, 0.0679, 4.4243, 0.7176],
    # [0.0487, 0.7411, 0.0106, -2.0919, 0.0651, 4.4244, 0.7192],
    # [0.0468, 0.7410, 0.0096, -2.0922, 0.0622, 4.4244, 0.7208],
    # [0.0448, 0.7409, 0.0085, -2.0925, 0.0594, 4.4245, 0.7223],
    # [0.0429, 0.7408, 0.0074, -2.0928, 0.0565, 4.4246, 0.7239],
    # [0.0409, 0.7407, 0.0064, -2.0930, 0.0537, 4.4246, 0.7255],
    # [0.0389, 0.7406, 0.0053, -2.0932, 0.0508, 4.4247, 0.7271],
    # [0.0370, 0.7405, 0.0043, -2.0935, 0.0480, 4.4247, 0.7287],
    # [0.0350, 0.7404, 0.0032, -2.0937, 0.0452, 4.4248, 0.7303],
    # [0.0330, 0.7404, 0.0021, -2.0938, 0.0423, 4.4248, 0.7318],
    # [0.0311, 0.7403, 0.0011, -2.0940, 0.0395, 4.4248, 0.7334],
    # [0.0291, 0.7402, 0.0000, -2.0942, 0.0366, 4.4249, 0.7350],
    # [0.0272, 0.7402, -0.0010, -2.0943, 0.0338, 4.4249, 0.7366],
    # [0.0252, 0.7401, -0.0021, -2.0945, 0.0309, 4.4249, 0.7382],
    # [0.0232, 0.7401, -0.0032, -2.0946, 0.0281, 4.4250, 0.7397],
    # [0.0213, 0.7400, -0.0042, -2.0947, 0.0252, 4.4250, 0.7413],
    # [0.0193, 0.7400, -0.0053, -2.0947, 0.0224, 4.4250, 0.7429],
    # [0.0173, 0.7400, -0.0063, -2.0948, 0.0195, 4.4250, 0.7445],
    # [0.0154, 0.7400, -0.0074, -2.0949, 0.0167, 4.4251, 0.7460],
    # [0.0134, 0.7400, -0.0085, -2.0949, 0.0138, 4.4251, 0.7476],
    # [0.0115, 0.7400, -0.0095, -2.0949, 0.0110, 4.4251, 0.7492],
    # [0.0095, 0.7400, -0.0106, -2.0949, 0.0081, 4.4251, 0.7508],
    # [0.0075, 0.7400, -0.0117, -2.0949, 0.0053, 4.4251, 0.7524],
    # [0.0056, 0.7400, -0.0127, -2.0949, 0.0024, 4.4251, 0.7539],
    # [0.0036, 0.7400, -0.0138, -2.0949, -0.0004, 4.4251, 0.7555],
    # [0.0016, 0.7400, -0.0148, -2.0948, -0.0033, 4.4251, 0.7571],
    # [-0.0003, 0.7401, -0.0159, -2.0947, -0.0061, 4.4251, 0.7587],
    # [-0.0023, 0.7401, -0.0170, -2.0947, -0.0090, 4.4251, 0.7602],
    # [-0.0043, 0.7402, -0.0180, -2.0946, -0.0118, 4.4251, 0.7618],
    # [-0.0062, 0.7402, -0.0191, -2.0944, -0.0147, 4.4251, 0.7634],
    # [-0.0082, 0.7403, -0.0201, -2.0943, -0.0175, 4.4251, 0.7650],
    # [-0.0101, 0.7403, -0.0212, -2.0942, -0.0204, 4.4250, 0.7666],


    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1447, 0.7552, 0.0611, -2.0589, 0.2030, 4.4179, 0.6399],
    # [0.1366, 0.7533, 0.0570, -2.0633, 0.1915, 4.4187, 0.6468],
    # [0.1284, 0.7516, 0.0528, -2.0672, 0.1799, 4.4195, 0.6537],
    # [0.1203, 0.7500, 0.0486, -2.0709, 0.1683, 4.4202, 0.6605],
    # [0.1122, 0.7486, 0.0444, -2.0744, 0.1566, 4.4208, 0.6673],
    # [0.1040, 0.7472, 0.0401, -2.0775, 0.1449, 4.4214, 0.6740],
    # [0.0959, 0.7460, 0.0358, -2.0804, 0.1332, 4.4220, 0.6808],
    # [0.0877, 0.7448, 0.0315, -2.0831, 0.1215, 4.4225, 0.6875],
    # [0.0796, 0.7438, 0.0272, -2.0854, 0.1097, 4.4230, 0.6941],
    # [0.0714, 0.7429, 0.0228, -2.0876, 0.0980, 4.4234, 0.7008],
    # [0.0633, 0.7422, 0.0184, -2.0894, 0.0862, 4.4238, 0.7074],
    # [0.0551, 0.7415, 0.0141, -2.0910, 0.0744, 4.4241, 0.7140],
    # [0.0470, 0.7410, 0.0097, -2.0923, 0.0625, 4.4244, 0.7206],
    # [0.0388, 0.7405, 0.0053, -2.0934, 0.0507, 4.4246, 0.7272],
    # [0.0307, 0.7402, 0.0009, -2.0942, 0.0389, 4.4248, 0.7338],
    # [0.0225, 0.7400, -0.0036, -2.0948, 0.0270, 4.4250, 0.7403],
    # [0.0143, 0.7399, -0.0080, -2.0950, 0.0152, 4.4250, 0.7469],
    # [0.0062, 0.7399, -0.0124, -2.0951, 0.0033, 4.4251, 0.7534],
    # [-0.0020, 0.7400, -0.0168, -2.0948, -0.0085, 4.4251, 0.7600],
    # [-0.0101, 0.7403, -0.0212, -2.0943, -0.0204, 4.4250, 0.7666],


    # [0.1737, 0.3923, 0.0417, -2.1585, 0.2565, 4.1599, 0.5885],
    # [0.1499, 0.3861, 0.0335, -2.1698, 0.2196, 4.1597, 0.6128],
    # [0.1261, 0.3810, 0.0251, -2.1792, 0.1824, 4.1596, 0.6370],
    # [0.1021, 0.3769, 0.0165, -2.1868, 0.1448, 4.1596, 0.6610],
    # [0.0781, 0.3738, 0.0078, -2.1925, 0.1071, 4.1595, 0.6849],
    # [0.0540, 0.3717, -0.0010, -2.1965, 0.0692, 4.1595, 0.7088],
    # [0.0298, 0.3706, -0.0099, -2.1986, 0.0311, 4.1596, 0.7327],
    # [0.0057, 0.3704, -0.0188, -2.1989, -0.0069, 4.1596, 0.7565],
    # [-0.0185, 0.3713, -0.0277, -2.1973, -0.0450, 4.1597, 0.7804],
    # [-0.0427, 0.3732, -0.0365, -2.1939, -0.0829, 4.1598, 0.8043],
    # [-0.0668, 0.3761, -0.0452, -2.1887, -0.1207, 4.1599, 0.8282],
    # [-0.0908, 0.3800, -0.0538, -2.1817, -0.1583, 4.1600, 0.8523],
    # [-0.1148, 0.3849, -0.0623, -2.1729, -0.1955, 4.1602, 0.8764],
    # [-0.1387, 0.3907, -0.0705, -2.1622, -0.2325, 4.1604, 0.9007],
    # [-0.1626, 0.3975, -0.0785, -2.1497, -0.2691, 4.1606, 0.9252],
    # [-0.1863, 0.4053, -0.0862, -2.1354, -0.3052, 4.1608, 0.9499],
    # [-0.2098, 0.4141, -0.0937, -2.1194, -0.3409, 4.1610, 0.9747],
    # [-0.2333, 0.4238, -0.1008, -2.1015, -0.3760, 4.1612, 0.9998],
    # [-0.2566, 0.4345, -0.1076, -2.0817, -0.4106, 4.1614, 1.0252],
    # [-0.2798, 0.4461, -0.1140, -2.0602, -0.4447, 4.1616, 1.0508],


## 60 steps for 0.1m movement
    # [-0.0088, 0.3710, -0.0241, -2.1981, -0.0297, 4.1598, 0.7708],
    # [-0.0088, 0.3710, -0.0241, -2.1981, -0.0297, 4.1598, 0.7708],
    # [-0.0119, 0.3711, -0.0253, -2.1979, -0.0346, 4.1598, 0.7739],
    # [-0.0150, 0.3713, -0.0264, -2.1976, -0.0395, 4.1598, 0.7770],
    # [-0.0181, 0.3714, -0.0276, -2.1973, -0.0444, 4.1598, 0.7801],
    # [-0.0212, 0.3716, -0.0287, -2.1970, -0.0493, 4.1598, 0.7831],
    # [-0.0243, 0.3718, -0.0298, -2.1966, -0.0542, 4.1598, 0.7862],
    # [-0.0275, 0.3720, -0.0310, -2.1962, -0.0591, 4.1598, 0.7893],
    # [-0.0306, 0.3723, -0.0321, -2.1958, -0.0640, 4.1599, 0.7924],
    # [-0.0337, 0.3725, -0.0333, -2.1954, -0.0689, 4.1599, 0.7955],
    # [-0.0368, 0.3728, -0.0344, -2.1949, -0.0737, 4.1599, 0.7985],
    # [-0.0399, 0.3731, -0.0355, -2.1944, -0.0786, 4.1599, 0.8016],
    # [-0.0430, 0.3734, -0.0367, -2.1938, -0.0835, 4.1599, 0.8047],
    # [-0.0461, 0.3737, -0.0378, -2.1933, -0.0884, 4.1599, 0.8078],
    # [-0.0492, 0.3740, -0.0389, -2.1927, -0.0932, 4.1599, 0.8109],
    # [-0.0523, 0.3744, -0.0400, -2.1920, -0.0981, 4.1599, 0.8139],
    # [-0.0554, 0.3747, -0.0412, -2.1914, -0.1030, 4.1600, 0.8170],
    # [-0.0585, 0.3751, -0.0423, -2.1907, -0.1079, 4.1600, 0.8201],
    # [-0.0617, 0.3755, -0.0434, -2.1899, -0.1127, 4.1600, 0.8232],
    # [-0.0648, 0.3759, -0.0445, -2.1892, -0.1176, 4.1600, 0.8263],
    # [-0.0679, 0.3764, -0.0457, -2.1884, -0.1224, 4.1600, 0.8294],
    # [-0.0710, 0.3768, -0.0468, -2.1876, -0.1273, 4.1600, 0.8325],
    # [-0.0741, 0.3773, -0.0479, -2.1867, -0.1321, 4.1601, 0.8356],
    # [-0.0772, 0.3778, -0.0490, -2.1859, -0.1370, 4.1601, 0.8387],
    # [-0.0803, 0.3783, -0.0501, -2.1850, -0.1418, 4.1601, 0.8418],
    # [-0.0834, 0.3788, -0.0512, -2.1840, -0.1466, 4.1601, 0.8449],
    # [-0.0865, 0.3793, -0.0523, -2.1831, -0.1515, 4.1601, 0.8480],
    # [-0.0896, 0.3799, -0.0534, -2.1821, -0.1563, 4.1601, 0.8511],
    # [-0.0927, 0.3804, -0.0545, -2.1811, -0.1611, 4.1602, 0.8542],
    # [-0.0958, 0.3810, -0.0556, -2.1800, -0.1659, 4.1602, 0.8573],
    # [-0.0988, 0.3816, -0.0567, -2.1789, -0.1708, 4.1602, 0.8604],
    # [-0.1019, 0.3822, -0.0578, -2.1778, -0.1756, 4.1602, 0.8635],
    # [-0.1050, 0.3829, -0.0589, -2.1767, -0.1804, 4.1602, 0.8666],
    # [-0.1081, 0.3835, -0.0599, -2.1755, -0.1852, 4.1603, 0.8697],
    # [-0.1112, 0.3842, -0.0610, -2.1743, -0.1899, 4.1603, 0.8728],
    # [-0.1143, 0.3848, -0.0621, -2.1730, -0.1947, 4.1603, 0.8760],
    # [-0.1174, 0.3855, -0.0632, -2.1718, -0.1995, 4.1603, 0.8791],
    # [-0.1205, 0.3863, -0.0642, -2.1705, -0.2043, 4.1604, 0.8822],
    # [-0.1235, 0.3870, -0.0653, -2.1691, -0.2091, 4.1604, 0.8853],
    # [-0.1266, 0.3877, -0.0664, -2.1678, -0.2138, 4.1604, 0.8885],
    # [-0.1297, 0.3885, -0.0674, -2.1664, -0.2186, 4.1604, 0.8916],
    # [-0.1328, 0.3893, -0.0685, -2.1650, -0.2233, 4.1605, 0.8947],
    # [-0.1359, 0.3901, -0.0695, -2.1635, -0.2281, 4.1605, 0.8979],
    # [-0.1389, 0.3909, -0.0706, -2.1621, -0.2328, 4.1605, 0.9010],
    # [-0.1420, 0.3917, -0.0716, -2.1605, -0.2376, 4.1605, 0.9042],
    # [-0.1451, 0.3925, -0.0727, -2.1590, -0.2423, 4.1605, 0.9073],
    # [-0.1482, 0.3934, -0.0737, -2.1574, -0.2470, 4.1606, 0.9105],
    # [-0.1512, 0.3943, -0.0747, -2.1558, -0.2517, 4.1606, 0.9136],
    # [-0.1543, 0.3952, -0.0758, -2.1542, -0.2564, 4.1606, 0.9168],
    # [-0.1574, 0.3961, -0.0768, -2.1526, -0.2611, 4.1606, 0.9199],
    # [-0.1604, 0.3970, -0.0778, -2.1509, -0.2658, 4.1607, 0.9231],
    # [-0.1635, 0.3979, -0.0788, -2.1492, -0.2705, 4.1607, 0.9262],
    # [-0.1665, 0.3989, -0.0798, -2.1474, -0.2752, 4.1607, 0.9294],
    # [-0.1696, 0.3999, -0.0808, -2.1456, -0.2798, 4.1608, 0.9326],
    # [-0.1726, 0.4009, -0.0818, -2.1438, -0.2845, 4.1608, 0.9357],
    # [-0.1757, 0.4019, -0.0828, -2.1420, -0.2892, 4.1608, 0.9389],
    # [-0.1788, 0.4029, -0.0838, -2.1401, -0.2938, 4.1608, 0.9421],
    # [-0.1818, 0.4039, -0.0848, -2.1382, -0.2984, 4.1609, 0.9453],
    # [-0.1849, 0.4050, -0.0858, -2.1363, -0.3031, 4.1609, 0.9485],
    # [-0.1879, 0.4060, -0.0868, -2.1343, -0.3077, 4.1609, 0.9517],
    # [-0.1909, 0.4071, -0.0877, -2.1323, -0.3123, 4.1609, 0.9548],

## 30 steps for 0.05m movement
    # [-0.0088, 0.3710, -0.0241, -2.1981, -0.0297, 4.1598, 0.7708],
    # [-0.0088, 0.3710, -0.0241, -2.1981, -0.0297, 4.1598, 0.7708],
    # [-0.0119, 0.3711, -0.0253, -2.1979, -0.0347, 4.1598, 0.7740],
    # [-0.0151, 0.3713, -0.0265, -2.1976, -0.0397, 4.1598, 0.7771],
    # [-0.0183, 0.3714, -0.0276, -2.1973, -0.0447, 4.1598, 0.7802],
    # [-0.0214, 0.3716, -0.0288, -2.1969, -0.0496, 4.1598, 0.7834],
    # [-0.0246, 0.3718, -0.0299, -2.1966, -0.0546, 4.1598, 0.7865],
    # [-0.0278, 0.3720, -0.0311, -2.1962, -0.0596, 4.1598, 0.7896],
    # [-0.0309, 0.3723, -0.0323, -2.1958, -0.0646, 4.1599, 0.7927],
    # [-0.0341, 0.3725, -0.0334, -2.1953, -0.0695, 4.1599, 0.7959],
    # [-0.0373, 0.3728, -0.0346, -2.1948, -0.0745, 4.1599, 0.7990],
    # [-0.0404, 0.3731, -0.0357, -2.1943, -0.0795, 4.1599, 0.8021],
    # [-0.0436, 0.3734, -0.0369, -2.1937, -0.0844, 4.1599, 0.8053],
    # [-0.0468, 0.3738, -0.0380, -2.1931, -0.0894, 4.1599, 0.8084],
    # [-0.0499, 0.3741, -0.0392, -2.1925, -0.0943, 4.1599, 0.8115],
    # [-0.0531, 0.3745, -0.0403, -2.1919, -0.0993, 4.1599, 0.8147],
    # [-0.0562, 0.3748, -0.0415, -2.1912, -0.1042, 4.1600, 0.8178],
    # [-0.0594, 0.3752, -0.0426, -2.1905, -0.1092, 4.1600, 0.8210],
    # [-0.0626, 0.3756, -0.0437, -2.1897, -0.1141, 4.1600, 0.8241],
    # [-0.0657, 0.3761, -0.0449, -2.1890, -0.1191, 4.1600, 0.8273],
    # [-0.0689, 0.3765, -0.0460, -2.1881, -0.1240, 4.1600, 0.8304],
    # [-0.0720, 0.3770, -0.0472, -2.1873, -0.1290, 4.1600, 0.8335],
    # [-0.0752, 0.3775, -0.0483, -2.1864, -0.1339, 4.1601, 0.8367],
    # [-0.0783, 0.3780, -0.0494, -2.1855, -0.1388, 4.1601, 0.8398],
    # [-0.0815, 0.3785, -0.0505, -2.1846, -0.1437, 4.1601, 0.8430],
    # [-0.0847, 0.3790, -0.0517, -2.1836, -0.1486, 4.1601, 0.8461],
    # [-0.0878, 0.3796, -0.0528, -2.1826, -0.1536, 4.1601, 0.8493],
    # [-0.0910, 0.3801, -0.0539, -2.1816, -0.1585, 4.1602, 0.8525],
    # [-0.0941, 0.3807, -0.0550, -2.1806, -0.1634, 4.1602, 0.8556],
    # [-0.0972, 0.3813, -0.0561, -2.1795, -0.1683, 4.1602, 0.8588],
    # [-0.1004, 0.3819, -0.0572, -2.1784, -0.1732, 4.1602, 0.8619],


    # [-0.0088, 0.3710, -0.0241, -2.1981, -0.0297, 4.1598, 0.7708],
    # [-0.0088, 0.3710, -0.0241, -2.1981, -0.0297, 4.1598, 0.7708],
    # [-0.0190, 0.3714, -0.0279, -2.1974, -0.0458, 4.1598, 0.7809],
    # [-0.0292, 0.3721, -0.0316, -2.1962, -0.0618, 4.1598, 0.7910],
    # [-0.0394, 0.3729, -0.0353, -2.1946, -0.0778, 4.1598, 0.8011],
    # [-0.0496, 0.3739, -0.0391, -2.1928, -0.0938, 4.1599, 0.8112],
    # [-0.0598, 0.3752, -0.0427, -2.1906, -0.1098, 4.1599, 0.8213],
    # [-0.0699, 0.3765, -0.0464, -2.1880, -0.1257, 4.1599, 0.8314],
    # [-0.0801, 0.3781, -0.0501, -2.1852, -0.1416, 4.1600, 0.8416],
    # [-0.0903, 0.3799, -0.0537, -2.1820, -0.1574, 4.1601, 0.8518],
    # [-0.1004, 0.3818, -0.0573, -2.1785, -0.1732, 4.1601, 0.8619],
    


        # [-0.0088,  0.3710, -0.0241, -2.1981, -0.0297,  4.1598, 0.7708],
        # [-0.0088,  0.3710, -0.0241, -2.1981, -0.0297,  4.1598, 0.7708],
        # [ 0.0014,  0.3706, -0.0204, -2.1988, -0.0137,  4.1598, 0.7608],
        # [ 0.0116,  0.3704, -0.0166, -2.1991,  0.0024,  4.1597, 0.7507],
        # [ 0.0218,  0.3704, -0.0129, -2.1990,  0.0185,  4.1596, 0.7406],
        # [ 0.0320,  0.3706, -0.0091, -2.1986,  0.0346,  4.1596, 0.7306],
        # [ 0.0422,  0.3710, -0.0054, -2.1978,  0.0506,  4.1596, 0.7205],
        # [ 0.0524,  0.3716, -0.0016, -2.1968,  0.0667,  4.1596, 0.7104],
        # [ 0.0626,  0.3723,  0.0021, -2.1954,  0.0827,  4.1596, 0.7004],
        # [ 0.0728,  0.3732,  0.0058, -2.1937,  0.0987,  4.1596, 0.6903],
        # [ 0.0829,  0.3743,  0.0095, -2.1916,  0.1147,  4.1596, 0.6802],
    ]

    # For the unloading phase, simply reverse the loading positions.
    unloading_positions = list(reversed(loading_positions))

    # 1. Move to a "reset" or home position before starting (we use the first position from the loading phase)
    reset_joint_positions = loading_positions[0]
    move_to_position(robot_interface, np.array(reset_joint_positions), controller_cfg)
    if stop_movement.is_set():
        return
    time.sleep(0.5)

    # 2. Loading Phase (event label "1"): move through each discrete position.
    for pos in loading_positions:
        move_to_position(robot_interface, np.array(pos), controller_cfg, event_label="1")
        if stop_movement.is_set():
            return
        time.sleep(0.5)  # Optional delay between steps

    # 3. Unloading Phase (event label "2"): return along the reversed trajectory.
    for pos in unloading_positions:
        move_to_position(robot_interface, np.array(pos), controller_cfg, event_label="2")
        if stop_movement.is_set():
            return
        time.sleep(0.5)
    
    # Finally, signal that movement is done.
    movement_done.set()

# Gravity Compensation Function
def perform_gravity_compensation(robot_interface, controller_type, controller_cfg):
    print("Starting gravity compensation at the current position...")
    osc_move(robot_interface, controller_type, controller_cfg, num_steps=200)

def osc_move(robot_interface, controller_type, controller_cfg, num_steps, time_interval=0.01):
    for step in range(num_steps):
        current_pose = robot_interface.last_eef_pose
        z_position = current_pose[2, 3]
        print(f"Step {step}, Current z-axis position: {z_position}")
        action = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0] + [-1.0])
        robot_interface.control(controller_type=controller_type, action=action, controller_cfg=controller_cfg)
        time.sleep(time_interval)

# Save Data to CSV
def save_data_to_csv():
    date_folder = time.strftime("%Y%m%d")
    time_folder = time.strftime("%H%M%S")
    data_folder = os.path.join("data", date_folder, time_folder)
    os.makedirs(data_folder, exist_ok=True)

    # Save force data
    if force_data:
        force_df = pd.DataFrame(force_data, columns=["Timestamp", "Fx", "Fy", "Fz", "Force Magnitude"])
        force_df.to_csv(os.path.join(data_folder, "force_data.csv"), index=False)

    # Save end-effector positions (X, Y, Z) to CSV
    if eef_positions:
        eef_df = pd.DataFrame(eef_positions, columns=["Timestamp", "X_Offset", "Y_Offset", "Z_Offset"])
        eef_df.to_csv(os.path.join(data_folder, "eef_positions.csv"), index=False)

    # Save Z-position CSV
    z_pos_df = pd.DataFrame({"Timestamp": timestamps, "Y Position": y_positions, "Event": None})
    for timestamp, event in event_markers:
        closest_index = (z_pos_df["Timestamp"] - timestamp).abs().idxmin()  
        z_pos_df.loc[closest_index, "Event"] = event
    z_pos_df.to_csv(os.path.join(data_folder, "y_position_data.csv"), index=False)

    # Save joint positions
    if joint_positions:
        num_joints = len(joint_positions[0]) if isinstance(joint_positions[0], (list, np.ndarray)) else 1
        joint_pos_df = pd.DataFrame(joint_positions, columns=[f"Joint {i+1} Position" for i in range(num_joints)])
        joint_pos_df.to_csv(os.path.join(data_folder, "joint_positions.csv"), index=False)

    # Save torque data
    if torque_data:
        torque_df = pd.DataFrame(torque_data, columns=["Timestamp", "Tx", "Ty", "Tz", "Torque Magnitude"])
        torque_df.to_csv(os.path.join(data_folder, "torque_data.csv"), index=False)

    print(f"Data saved to folder: {data_folder}")
    return data_folder

def plot_merged_data(data_folder):
    # First Figure: Fx, Fy, Fz, Force Magnitude with Z-position
    fig1, ax1 = plt.subplots()

    if force_data:
        times = [entry[0] for entry in force_data]  # Extract timestamps
        Fx = [entry[1] for entry in force_data]    # Extract Fx
        Fy = [entry[2] for entry in force_data]    # Extract Fy
        Fz = [entry[3] for entry in force_data]    # Extract Fz
        force_magnitudes = [entry[4] for entry in force_data]  # Extract force magnitudes

        ax1.plot(times, Fx, label="Fx", color='tab:blue')
        ax1.plot(times, Fy, label="Fy", color='tab:orange')
        ax1.plot(times, Fz, label="Fz", color='tab:green')
        ax1.plot(times, force_magnitudes, label="Force Magnitude", color='tab:red', linestyle='--', linewidth=0.25)

        max_force_magnitude = max(abs(val) for val in force_magnitudes)
        ax1.set_ylim([-(max_force_magnitude + 5), max_force_magnitude + 5])

    ax1.set_xlabel("Time (s)")
    ax1.set_ylabel("Force (N)")
    ax1.legend(loc="upper left")
    ax1.grid(True)

    if timestamps:
        ax2 = ax1.twinx()
        ax2.plot(timestamps, y_positions, label="Y Position", color='tab:purple', marker='o', markersize=2)
        max_z_position = max(abs(val) for val in y_positions)
        ax2.set_ylim([-max_z_position - 0.0025, max_z_position + 0.0025])
        ax2.set_ylabel("Y Position (m)", color='tab:purple')
        ax2.legend(loc="upper right")

    plt.title("Forces (Fx, Fy, Fz, Magnitude) and Y-Position Over Time")
    force_plot_path = os.path.join(data_folder, "force_plot.png")
    plt.savefig(force_plot_path, dpi=1000)
    plt.show()
    plt.close(fig1)

    print(f"Force plot saved to {force_plot_path}")

    # Second Figure: Tx, Ty, Tz, Torque Magnitude with Z-position
    fig2, ax3 = plt.subplots()

    if torque_data:
        times = [entry[0] for entry in torque_data]
        Tx = [entry[1] for entry in torque_data]
        Ty = [entry[2] for entry in torque_data]
        Tz = [entry[3] for entry in torque_data]
        torque_magnitudes = [entry[4] for entry in torque_data]

        ax3.plot(times, Tx, label="Tx", color='tab:blue')
        ax3.plot(times, Ty, label="Ty", color='tab:orange')
        ax3.plot(times, Tz, label="Tz", color='tab:green')
        ax3.plot(times, torque_magnitudes, label="Torque Magnitude", color='tab:red', linestyle='--', linewidth=1)
        max_torque_magnitude = max(abs(val) for val in torque_magnitudes)
        ax3.set_ylim([-(max_torque_magnitude + 5), max_torque_magnitude + 5])

    ax3.set_xlabel("Time (s)")
    ax3.set_ylabel("Torque (Nm)")
    ax3.legend(loc="upper left")
    ax3.grid(True)

    if timestamps:
        ax4 = ax3.twinx()
        ax4.plot(timestamps, y_positions, label="Y Position", color='tab:purple', marker='o', markersize=2)
        max_z_position = max(abs(val) for val in y_positions)
        ax4.set_ylim([-max_z_position - 0.0025, max_z_position + 0.0025])
        ax4.set_ylabel("Y Position (m)", color='tab:purple')
        ax4.legend(loc="upper right")

    plt.title("Torques (Tx, Ty, Tz, Magnitude) and Y-Position Over Time")
    torque_plot_path = os.path.join(data_folder, "torque_plot.png")
    plt.savefig(torque_plot_path, dpi=1000)
    plt.show()
    plt.close(fig2)

    print(f"Torque plot saved to {torque_plot_path}")

    # New Plot for End-Effector X, Y, Z offsets
    if eef_positions:
        fig3, ax5 = plt.subplots(figsize=(10, 6))
        times_eef = [pos[0] for pos in eef_positions]
        x_off = [pos[1] for pos in eef_positions]
        y_off = [pos[2] for pos in eef_positions]
        z_off = [pos[3] for pos in eef_positions]

        ax5.plot(times_eef, x_off, label='X Offset', color='blue')
        ax5.plot(times_eef, y_off, label='Y Offset', color='orange')
        ax5.plot(times_eef, z_off, label='Z Offset', color='green')
        ax5.set_xlabel('Time (s)')
        ax5.set_ylabel('Position Offset (m)')
        ax5.legend(loc='upper left')
        ax5.grid(True)
        ax5.set_title(eef_title)

        eef_plot_path = os.path.join(data_folder, "eef_offset_plot.png")
        plt.savefig(eef_plot_path, dpi=300)
        plt.show()
        plt.close(fig3)

        print(f"Offset end-effector position plot saved to {eef_plot_path}")

    print("All plots generated.")

def main():
    global global_start_time, force_sensor

    args = parse_args()

    # Begin robot interface setup
    try:
        robot_interface = FrankaInterface(config_root + f"/{args.interface_cfg}", use_visualizer=False)
        joint_controller_cfg = YamlConfig(config_root + f"/{args.controller_cfg}").as_easydict()
        osc_controller_cfg = get_default_controller_config(args.controller_type)
        print("Robot interface initialized.")
    except Exception as e:
        print(f"Robot interface initialization failed: {e}")
        return

    global_start_time = time.time()

    # Create data folder path
    date_folder = time.strftime("%Y%m%d")
    time_folder = time.strftime("%H%M%S")
    data_folder = os.path.join("data", date_folder, time_folder)
    os.makedirs(data_folder, exist_ok=True)

    # Start video recording thread if camera is enabled
    if args.enable_camera:
        video_output_path = os.path.join(data_folder, "realsense_recording.mp4")
        video_thread = threading.Thread(target=record_video, args=(video_output_path, video_duration, 30, rs_camera_index), daemon=True)
        video_thread.start()
    else:
        print("Camera recording disabled.")

    # If FT sensor is enabled, initialize and calibrate, then start monitoring thread.
    if args.enable_ft_sensor:
        sensor = initialize_force_sensor_for_calibration()
        if sensor is None:
            print("Sensor initialization failed. Exiting...")
            return

        force_offset, torque_offset = calibrate_force_sensor(sensor)
        if force_offset is None or torque_offset is None:
            print("Calibration failed. Exiting...")
            return

        monitoring_thread = threading.Thread(
            target=monitor_ft_sensor,
            args=(robot_interface, joint_controller_cfg, args.controller_type, osc_controller_cfg, sensor, force_offset, torque_offset),
            daemon=True
        )
        monitoring_thread.start()
    else:
        print("FT sensor monitoring disabled.")

    # Start movement thread using the discrete trajectory
    movement_thread = threading.Thread(target=joint_position_control, args=(robot_interface, joint_controller_cfg), daemon=True)
    movement_thread.start()

    # Wait for threads to finish
    if args.enable_ft_sensor:
        monitoring_thread.join()
    movement_thread.join()
    if args.enable_camera:
        video_thread.join()

    # Save and plot data after threads finish
    data_folder = save_data_to_csv()
    plot_merged_data(data_folder)

    print("Process complete.")

if __name__ == "__main__":
    main()
